# ---------------------------------------------------------------
# Core ModSecurity Rule Set ver.3.0.0
# Copyright (C) 2006-2016 Trustwave All rights reserved.
#
# The OWASP ModSecurity Core Rule Set is distributed under 
# Apache Software License (ASL) version 2
# Please see the enclosed LICENCE file for full details.
# ---------------------------------------------------------------

#
# This file REQUEST-901-INITIALIZATION.conf initializes the Core Rules
# and performs preparatory actions. It also fixes errors and omissions
# of variable definitions in the file modsecurity_crs_10_setup.conf.
# The setup.conf can and should be edited by the user, this file
# is part of the CRS installation and should not be altered.

#
# -=[ Initialization / General Setup ]=-
#
# Some constructs or individual rules will fail if certain parameters
# are not set in the setup.conf file. The following rules will catch
# these cases and assign sane default values.
#

# Default Paranoia Level (should be defined in rule 900023 in setup.conf)
SecRule &TX:paranoia_level "@eq 0" \
    "id:901100,\
    phase:1,\
    pass,\
    nolog,\
    setvar:tx.paranoia_level=1"

# Default Sampling Percentage (should be defined in rule 900025 in setup.conf)
SecRule &TX:sampling_percentage "@eq 0" \
    "id:901110,\
    phase:1,\
    pass,\
    nolog,\
    setvar:tx.sampling_percentage=100"


#
# -=[ Easing In / Sampling Percentage ]=-
#
# This is used to send only a limited percentage of requests into the Core
# Rule Set. The selection is based on TX.sampling_percentage and a pseudo
# random number calculated below.
#
# Use this to ease into a new Core Rules installation with an existing
# productive service.
#
# See 
# https://www.netnea.com/cms/2016/04/26/easing-in-conditional-modsecurity-rule-execution-based-on-pseudo-random-numbers/
#

#
# Generate the pseudo random number
#
# ATTENTION: This is no cryptographically secure random number. It's just
# a cheap way to get some random number suitable for sampling.
#
# We take the entropy contained in the UNIQUE_ID. We hash that variable and
# take the first integer numbers out of it. Theoretically, it is possible
# there are no integers in a sha1 hash. We make sure we get two
# integer numbers by taking the last two digits from the DURATION counter
# (in microseconds).
# Finally, leading zeros are removed from the two-digit random number.
#

SecRule TX:sampling_percentage "@eq 100" \
	"id:901200,\
	phase:1,\
	pass,\
	nolog,\
	skipAfter:END-REQUEST-901-INITIALIZATION"

SecRule UNIQUE_ID "@rx ^." \
	"id:901210,\
	phase:1,\
	pass,\
	nolog,\
	t:sha1,\
	t:hexEncode,\
	setvar:TX.sampling_rnd100=%{MATCHED_VAR}"

SecRule DURATION "@rx (..)$" \
	"id:901220,\
	phase:1,\
	pass,\
	capture,\
	nolog,\
	setvar:TX.sampling_rnd100=%{TX.sampling_rnd100}%{TX.1}"

SecRule TX:sampling_rnd100 "@rx ^[a-f]*([0-9])[a-f]*([0-9])" \
	"id:901230,\
	phase:1,\
	pass,\
	nolog,\
	capture,\
	setvar:TX.sampling_rnd100=%{TX.1}%{TX.2}"

SecRule TX:sampling_rnd100 "@rx ^0([0-9])" \
	"id:901240,\
	phase:1,\
	pass,\
	capture,\
	nolog,\
	setvar:TX.sampling_rnd100=%{TX.1}"


#
# Sampling decision
#
# If a request is allowed to pass without being checked by the CRS, there is no
# entry in the audit log (for performance reasons), but an error log entry is
# being written.  If you want to disable the error log entry, then issue the
# following directive somewhere after the inclusion of the CRS
# (E.g., RESPONSE-999-EXCEPTIONS.conf).
#
# SecRuleUpdateActionById 901150 "nolog"
#


SecRule TX:sampling_rnd100 "!@lt %{tx.sampling_percentage}" \
	"id:901250,\
	phase:1,\
	pass,\
	log,\
	noauditlog,\
	ctl:ruleEngine=off,\
	msg:'Sampling: Disable the rule engine based on sampling_percentage \
%{TX.sampling_percentage} and random number %{TX.sampling_rnd100}.'"



SecMarker "END-REQUEST-901-INITIALIZATION"

