# ------------------------------------------------------------------------
# OWASP ModSecurity Core Rule Set ver.3.1.0
# Copyright (c) 2006-2018 Trustwave and contributors. All rights reserved.
#
# The OWASP ModSecurity Core Rule Set is distributed under
# Apache Software License (ASL) version 2
# Please see the enclosed LICENSE file for full details.
# ------------------------------------------------------------------------

#
# -= Paranoia Level 0 (empty) =- (apply unconditionally)
#


SecRule TX:PARANOIA_LEVEL "@lt 1" "phase:1,id:914011,nolog,pass,tag:'paranoia-level/1',skipAfter:END-REQUEST-914-FILE-DETECTION"
SecRule TX:PARANOIA_LEVEL "@lt 1" "phase:2,id:914012,nolog,pass,tag:'paranoia-level/1',skipAfter:END-REQUEST-914-FILE-DETECTION"
#
# -= Paranoia Level 1 (default) =- (apply only when tx.paranoia_level is sufficiently high: 1 or higher)
#


#filetype 	hex start	  ASCII
#ani 		52 49 46 46 	  RIFF
#au 		2E 73 6E 64 	  snd
#bmp 		42 4D F8 A9 	  BM
#bmp 		42 4D 62 25 	  BMp%
#bmp 		42 4D 76 03 	  BMv
#cab 		4D 53 43 46 	  MSCF
#dll 		4D 5A 90 00 	  MZ
#Excel 		D0 CF 11 E0
#exe 		4D 5A 50 00 	  MZP (inno)
#exe 		4D 5A 90 00 	  MZ
#flv 		46 4C 56 01 	  FLV
#gif 		47 49 46 38 39 61 GIF89a
#gif 		47 49 46 38 37 61 GIF87a
#gz 		1F 8B 08 08
#ico 		00 00 01 00
#jpeg 		FF D8 FF E1
#jpeg 		FF D8 FF E0 	  JFIF
#jpeg 		FF D8 FF FE 	  JFIF
#Linux bin 	7F 45 4C 46 	  ELF
#png 		89 50 4E 47 	  PNG
#msi 		D0 CF 11 E0
#mp3 		49 44 33 2E 	  ID3
#mp3 		49 44 33 03 	  ID3
#OFT 		4F 46 54 32 	  OFT2
#PPT 		D0 CF 11 E0
#PDF 		25 50 44 46 	  %PDF
#rar 		52 61 72 21 	  Rar!
#sfw 		43 57 53 06/08 	  cws
#tar 		1F 8B 08 00
#tgz 		1F 9D 90 70
#Word 		D0 CF 11 E0
#wmv 		30 26 B2 75
#zip 		50 4B 03 04 	  PK
#dll            4D 5A 90 00       MZ
#exe            4D 5A 50 00       MZP (inno)
#exe            4D 5A 90 00       MZ
#Linux bin      7F 45 4C 46       ELF

SecMarker "BEGIN-REQUEST-914-FILE-UPLOAD-EXE"

# Detect DLL, ELF and EXE files upload
# There is a bug in modsecurity when using null \x00 in regex causing it to terminate the string and due to that
# all EXE and DLL verification rules only check the first three bytes up to the NOP and leave the NULL out of the regex
SecRule ARGS|XML|XML:/* \
    "@rx ^(?:\x4d\x5a(?:\x90|\x50)|\x7f\x45\x4c\x46)" \
    "id:914100,\
    phase:2,\
    block,\
    msg:'Possible harmful executable file detected',\
    logdata:'Matched Data: %{TX.0} found within %{MATCHED_VARS_NAMES}: %{MATCHED_VARS}',\
    t:none,\
    tag:'application-multi',\
    tag:'platform-multi',\
    tag:'attack-file-upload',\
    tag:'OWASP_CRS/WEB_ATTACK/MALICIOUS_FILE',\
    tag:'paranoia-level/1',\
    ver:'OWASP_CRS/3.1.0',\
    severity:'NOTICE',\
    setvar:'tx.msg=%{rule.msg}',\
    setvar:'tx.anomaly_score=+%{tx.notice_anomaly_score}',\
    setvar:'tx.%{rule.id}-OWASP_CRS/WEB_ATTACK/MALICIOUS-FILE-%{MATCHED_VAR_NAME}=%{tx.0}'"

SecMarker "BEGIN-REQUEST-914-FILE-UPLOAD-STREAM"

#STREAM variables are not compatible with libModSecurity (v3), commenting those rules that cause compatibility issues
#SecRule MODSEC_BUILD "!@rx ^020" \
#    "id:914110,\
#    phase:2,\
#    pass,\
#    noauditlog,\
#    msg:'Incompatible ModSec %{MODSEC_BUILD} detected skipping STREAM_INPUT_BODY handling',\
#    tag:'application-multi',\
#    tag:'platform-multi',\
#    tag:'attack-file-upload',\
#    tag:'OWASP_CRS/WEB_ATTACK/MALICIOUS_FILE',\
#    tag:'paranoia-level/1',\
#    ver:'OWASP_CRS/3.1.0',\
#    severity:'NOTICE',\
#    skipAfter:END-REQUEST-914-FILE-UPLOAD-STREAM"


SecRule TX:PARANOIA_LEVEL "@lt 2" "phase:1,id:914013,nolog,pass,tag:'paranoia-level/2',skipAfter:END-REQUEST-914-FILE-DETECTION"
SecRule TX:PARANOIA_LEVEL "@lt 2" "phase:2,id:914014,nolog,pass,tag:'paranoia-level/2',skipAfter:END-REQUEST-914-FILE-DETECTION"
#
# -= Paranoia Level 2 =- (apply only when tx.paranoia_level is sufficiently high: 2 or higher)
#


# Note : This directive is NOT supported for libModSecurity (v3).
#SecStreamInBodyInspection On
#SecRule STREAM_INPUT_BODY "@rx ^(?:\x4d\x5a(?:\x90|\x50)\x00|\x7f\x45\x4c\x46)" \
#    "id:9142010,\
#    phase:2,\
#    block,\
#    msg:'Possible harmful file detected',\
#    logdata:'Matched Data: %{TX.0} found within %{MATCHED_VARS_NAMES}: %{MATCHED_VARS}',\
#    t:none,\
#    tag:'application-multi',\
#    tag:'platform-multi',\
#    tag:'attack-file-upload',\
#    tag:'OWASP_CRS/WEB_ATTACK/MALICIOUS_FILE',\
#    tag:'paranoia-level/2',\
#    ver:'OWASP_CRS/3.1.0',\
#    severity:'NOTICE',\
#    setvar:'tx.msg=%{rule.msg}',\
#    setvar:'tx.anomaly_score=+%{tx.notice_anomaly_score}',\
#    setvar:'tx.%{rule.id}-OWASP_CRS/WEB_ATTACK/MALICIOUS-FILE-%{MATCHED_VAR_NAME}=%{tx.0}'"

# 9142020 does exactly the same as 914210 but uses REQUEST_BODY variable instead of STREAM_INPUT_BODY variable which
# is the entire body and not just the part of the stream that is being received
SecRule REQUEST_BODY "@rx ^(?:\x4d\x5a(?:\x90|\x50)|\x7f\x45\x4c\x46)" \
    "id:9142020,\
    phase:2,\
    block,\
    msg:'Possible harmful executable file detected in request body',\
    logdata:'Matched Data: %{TX.0} found within %{MATCHED_VARS_NAMES}: %{MATCHED_VARS}',\
    t:none,\
    tag:'application-multi',\
    tag:'platform-multi',\
    tag:'attack-file-upload',\
    tag:'OWASP_CRS/WEB_ATTACK/MALICIOUS_FILE',\
    tag:'paranoia-level/2',\
    ver:'OWASP_CRS/3.1.0',\
    severity:'NOTICE',\
    setvar:'tx.msg=%{rule.msg}',\
    setvar:'tx.anomaly_score=+%{tx.notice_anomaly_score}',\
    setvar:'tx.%{rule.id}-OWASP_CRS/WEB_ATTACK/MALICIOUS-FILE-%{MATCHED_VAR_NAME}=%{tx.0}'"

SecMarker "END-REQUEST-914-FILE-UPLOAD-STREAM"

# Enable SecUploadKeepFiles On to crs-setup.conf file to check uploaded files
#SecUploadKeepFiles On
# Note : Starting in version 2.9 ModSecurity will not fill the FILES_TMPNAMES variable
# unless SecTmpSaveUploadedFiles directive is On, or the SecUploadKeepFiles directive is set to RelevantOnly.
SecRule FILES_TMP_CONTENT "@rx ^(?:\x4d\x5a(?:\x90|\x50)|\x7f\x45\x4c\x46)" \
    "id:9142030,\
    phase:2,\
    block,\
    msg:'Possible harmful executable file detected in uploaded file',\
    logdata:'Matched Data: %{TX.0} found within %{MATCHED_VARS_NAMES}: %{MATCHED_VARS}',\
    t:none,\
    tag:'application-multi',\
    tag:'platform-multi',\
    tag:'attack-file-upload',\
    tag:'OWASP_CRS/WEB_ATTACK/MALICIOUS_FILE',\
    tag:'paranoia-level/2',\
    ver:'OWASP_CRS/3.1.0',\
    severity:'NOTICE',\
    setvar:'tx.msg=%{rule.msg}',\
    setvar:'tx.anomaly_score=+%{tx.notice_anomaly_score}',\
    setvar:'tx.%{rule.id}-OWASP_CRS/WEB_ATTACK/MALICIOUS-FILE-%{MATCHED_VAR_NAME}=%{tx.0}'"

SecMarker "END-REQUEST-914-FILE-UPLOAD-EXE"

SecMarker "BEGIN-REQUEST-914-FILE-UPLOAD-IMAGE"

#Detect uploads declared as images that do not match an image signature
#filetype       hex start         ASCII
#ani            52 49 46 46       RIFF
#bmp            42 4D F8 A9       BM
#bmp            42 4D 62 25       BMp%
#bmp            42 4D 76 03       BMv
#gif            47 49 46 38 39 61 GIF89a
#gif            47 49 46 38 37 61 GIF87a
#ico            00 00 01 00
#jpeg           FF D8 FF E1
#jpeg           FF D8 FF E0       JFIF
#jpeg           FF D8 FF FE       JFIF
#png            89 50 4E 47       PNG

# This rule checks if the uploaded file extension matches the file header type
SecRule FILES_TMPNAMES "@rx (?:jpeg|jpg|gif|png|bmp|image|ico)$" \
    "id:9142040,\
    phase:2,\
    block,\
    msg:'Declared Image Content does not match an image signature',\
    logdata:'Matched Data: %{TX.0} found within %{MATCHED_VARS_NAMES}: %{MATCHED_VARS}',\
    t:none,t:lowercase,\
    tag:'application-multi',\
    tag:'platform-multi',\
    tag:'attack-file-upload',\
    tag:'OWASP_CRS/WEB_ATTACK/MALICIOUS_FILE',\
    tag:'paranoia-level/2',\
    ver:'OWASP_CRS/3.1.0',\
    severity:'NOTICE',\
    chain"
    SecRule FILES_TMP_CONTENT "!@rx ^(?:\x89\x50\x4e\x47|\xff\xd8\xff(?:\xe1|\xe0|\xfe)|\x47\x49\x46\x38(?:\x37|\x39)\x61|\x42\x4d(?:\xf8\xa9|\x62\x25|\x76\x03)|\x00\x00\x01\x00|\x52\x49\x46\x46)" \
        "setvar:'tx.msg=%{rule.msg}',\
        setvar:'tx.anomaly_score=+%{tx.notice_anomaly_score}',\
        setvar:'tx.%{rule.id}-OWASP_CRS/WEB_ATTACK/MALICIOUS-FILE-%{MATCHED_VAR_NAME}=%{tx.0}'"

SecMarker "END-REQUEST-914-FILE-UPLOAD-IMAGE"

#filetype       hex start         ASCII
#bmp            42 4D F8 A9       BM
#bmp            42 4D 62 25       BMp%
#bmp            42 4D 76 03       BMv
#Excel          D0 CF 11 E0
#gif            47 49 46 38 39 61 GIF89a
#gif            47 49 46 38 37 61 GIF87a
#jpeg           FF D8 FF E1
#jpeg           FF D8 FF E0       JFIF
#jpeg           FF D8 FF FE       JFIF
#png            89 50 4E 47       PNG
#OFT            4F 46 54 32       OFT2
#PPT            D0 CF 11 E0
#PDF            25 50 44 46       %PDF
#Word           D0 CF 11 E0

# Check for valid file contents in protected URI and block if there is no match, URI's are configured in 901180
SecRule REQUEST_FILENAME "@rx ^.*$" \
    "id:9142050,\
    phase:2,\
    pass,\
    log,\
    noauditlog,\
    msg:'Performing image and document file signature check for protected upload URI',\
    t:none,t:urlDecode,t:lowercase,\
    tag:'application-multi',\
    tag:'platform-multi',\
    tag:'file-upload',\
    tag:'paranoia-level/2',\
    ver:'OWASP_CRS/3.1.0',\
    setvar:'tx.check_upload_uri=#%{MATCHED_VAR}#',\
    chain,\
    skipAfter:END-REQUEST-914-FILE-UPLOAD-DOCUMENT"
    SecRule TX:check_upload_uri "!@within %{tx.protected_uploads}"

# Check if argument 'logo' looks like base64 and contains base64; with a matching file header
# it will white list ARGS:logo from 941130 to avoid a false positive
# Change logo to whatever ARG contains the encoded image
# Adjust the regex to match particular case the rule will match arg json.logo
# containing for example "image/png;base64,iVBORw0KGgoA......"
# This rule assumes that the base64 encoded argument is called 'logo' and requires a minimum 12 byte long b64 string
SecRule ARGS:logo "@rx ^image/(?:jpeg|jpg|gif|png|bmp|image|ico);base64,([a-zA-Z0-9\-_]{12})" \
    "id:9142060,\
    phase:2,\
    pass,\
    capture,\
    log,\
    noauditlog,\
    msg:'Encoded image type match an image signature, white listing argument',\
    logdata:'Captured header: %{TX.1}, Matched Data: %{TX.0} found within %{MATCHED_VARS_NAMES}: %{MATCHED_VARS}',\
    t:none,\
    tag:'application-multi',\
    tag:'platform-multi',\
    tag:'paranoia-level/2',\
    ver:'OWASP_CRS/3.1.0',\
    severity:'NOTICE',\
    chain"
    SecRule TX:1 "@rx ^(?:\x89\x50\x4e\x47|\xff\xd8\xff(?:\xe1|\xe0|\xfe)|\x47\x49\x46\x38(?:\x37|\x39)\x61|\x42\x4d(?:\xf8\xa9|\x62\x25|\x76\x03)|\x00\x00\x01\x00|\x52\x49\x46\x46)" \
        "t:base64decode,\
        setvar:'tx.msg=%{rule.msg}',\
        ctl:ruleRemoveTargetById=941130;ARGS:logo"

SecAction "id:9142070,phase:2,pass,nolog,noauditlog,skipAfter:END-REQUEST-914-FILE-UPLOAD-DOCUMENT"

SecMarker "BEGIN-REQUEST-914-FILE-UPLOAD-DOCUMENT"

# Inspect long base64 encoded strings for images
SecRule ARGS|ARGS_NAMES|REQUEST_COOKIES|!REQUEST_COOKIES:/__utm/|REQUEST_COOKIES_NAMES|REQUEST_BODY|REQUEST_HEADERS|XML:/*|XML://@* \
    "@rx ^(?:[a-zA-Z0-9\-_]{45})(?:[a-zA-Z0-9\-_]{3})*(?:[a-zA-Z0-9\-_]{1}==|[a-zA-Z0-9\-_]{2}=)?" \
    "id:9142080,\
    phase:2,\
    pass,\
    noauditlog,\
    msg:'Content matched an image file signature',\
    logdata:'Matched Data: %{MATCHED_VAR} found within %{MATCHED_VAR_NAME}',\
    tag:'application-multi',\
    tag:'language-java',\
    tag:'platform-multi',\
    tag:'paranoia-level/2',\
    ver:'OWASP_CRS/3.1.0',\
    chain,\
    skipAfter:END-REQUEST-914-FILE-UPLOAD-DOCUMENT"
    SecRule MATCHED_VARS "@rx ^(?:\x89\x50\x4e\x47|\xff\xd8\xff(?:\xe1|\xe0|\xfe)|\x47\x49\x46\x38(?:\x37|\x39)\x61|\x42\x4d(?:\xf8\xa9|\x62\x25|\x76\x03)|\x00\x00\x01\x00|\x52\x49\x46\x46)" \
        "t:base64Decode,\
        setvar:'tx.msg=%{rule.msg}'"

# Inspect long base64 encoded strings for executables
SecRule ARGS|ARGS_NAMES|REQUEST_COOKIES|!REQUEST_COOKIES:/__utm/|REQUEST_COOKIES_NAMES|REQUEST_BODY|REQUEST_HEADERS|XML:/*|XML://@* \
    "@rx ^(?:[a-zA-Z0-9\-_]{45})(?:[a-zA-Z0-9\-_]{3})*(?:[a-zA-Z0-9\-_]{1}==|[a-zA-Z0-9\-_]{2}=)?" \
    "id:9142090,\
    phase:2,\
    pass,\
    log,\
    noauditlog,\
    msg:'Content matched a binary executable',\
    logdata:'Matched Data: %{MATCHED_VAR} found within %{MATCHED_VAR_NAME}',\
    tag:'application-multi',\
    tag:'language-java',\
    tag:'platform-multi',\
    tag:'attack-rce',\
    tag:'OWASP_CRS/WEB_ATTACK/COMMAND_INJECTION',\
    tag:'WASCTC/WASC-31',\
    tag:'OWASP_TOP_10/A1',\
    tag:'PCI/6.5.2',\
    tag:'paranoia-level/2',\
    ver:'OWASP_CRS/3.1.0',\
    severity:'CRITICAL',\
    chain"
    SecRule MATCHED_VARS "@rx ^(?:\x4d\x5a(?:\x90|\x50)|\x7f\x45\x4c\x46)" \
        "t:base64Decode,\
        setvar:'tx.msg=%{rule.msg}',\
        setvar:'tx.rce_score=+%{tx.critical_anomaly_score}',\
        setvar:'tx.anomaly_score=+%{tx.critical_anomaly_score}',\
        setvar:'tx.%{rule.id}-OWASP_CRS/WEB_ATTACK/RCE-%{MATCHED_VAR_NAME}=%{MATCHED_VAR}'"

# Check if for image files, and skip further checks
SecRule FILES_TMP_CONTENT|REQUEST_BODY "@rx ^(?:\x89\x50\x4e\x47|\xff\xd8\xff(?:\xe1|\xe0|\xfe)|\x47\x49\x46\x38(?:\x37|\x39)\x61|\x42\x4d(?:\xf8\xa9|\x62\x25|\x76\x03)|\x00\x00\x01\x00|\x52\x49\x46\x46)" \
    "id:9142100,\
    phase:2,\
    pass,\
    noauditlog,\
    msg:'Content matched an image file signature',\
    t:none,\
    tag:'application-multi',\
    tag:'platform-multi',\
    tag:'file-upload',\
    tag:'paranoia-level/2',\
    ver:'OWASP_CRS/3.1.0',\
    setvar:'tx.msg=%{rule.msg}',\
    setvar:'tx.%{rule.id}-OWASP_CRS/WEB_ATTACK/MALICIOUS-FILE-%{MATCHED_VAR_NAME}=%{tx.0}',\
    skipAfter:END-REQUEST-914-FILE-UPLOAD-DOCUMENT"

# Check for office or pdf files, and skip further checks
SecRule FILES_TMP_CONTENT|REQUEST_BODY "@rx ^(?:\x25\x50\x44\x46|\xd0\xcf\x11\xe0|\x4f\x46\x54\x32)" \
    "id:9142110,\
    phase:2,\
    pass,\
    noauditlog,\
    msg:'Content matched an office or pdf file signature',\
    t:none,\
    tag:'application-multi',\
    tag:'platform-multi',\
    tag:'attack-file-upload',\
    tag:'OWASP_CRS/WEB_ATTACK/MALICIOUS_FILE',\
    tag:'paranoia-level/2',\
    ver:'OWASP_CRS/3.1.0',\
    setvar:'tx.msg=%{rule.msg}',\
    setvar:'tx.%{rule.id}-OWASP_CRS/WEB_ATTACK/MALICIOUS-FILE-%{MATCHED_VAR_NAME}=%{tx.0}',\
    skipAfter:END-REQUEST-914-FILE-UPLOAD-DOCUMENT"

# If the previous checks for images, office or pdf files are not triggered to skip this action then this upload
# contains something different than what a regular upload would have in many cases so it will increase the anomaly
# score with NOTICE score as something that may be interesting to verify
SecAction \
    "id:9142120,\
    phase:2,\
    pass,\
    log,\
    msg:'Content does not match a image, office or pdf file signature',\
    tag:'application-multi',\
    tag:'platform-multi',\
    tag:'attack-file-upload',\
    tag:'OWASP_CRS/WEB_ATTACK/MALICIOUS_FILE',\
    tag:'paranoia-level/2',\
    ver:'OWASP_CRS/3.1.0',\
    severity:'NOTICE',\
    setvar:'tx.anomaly_score=+%{tx.notice_anomaly_score}'"

SecMarker "END-REQUEST-914-FILE-UPLOAD-DOCUMENT"


SecRule TX:PARANOIA_LEVEL "@lt 3" "phase:1,id:914015,nolog,pass,tag:'paranoia-level/3',skipAfter:END-REQUEST-914-FILE-DETECTION"
SecRule TX:PARANOIA_LEVEL "@lt 3" "phase:2,id:914016,nolog,pass,tag:'paranoia-level/3',skipAfter:END-REQUEST-914-FILE-DETECTION"
#
# -= Paranoia Level 3 =- (apply only when tx.paranoia_level is sufficiently high: 3 or higher)
#



SecRule TX:PARANOIA_LEVEL "@lt 4" "phase:1,id:914017,nolog,pass,tag:'paranoia-level/4',skipAfter:END-REQUEST-914-FILE-DETECTION"
SecRule TX:PARANOIA_LEVEL "@lt 4" "phase:2,id:914018,nolog,pass,tag:'paranoia-level/4',skipAfter:END-REQUEST-914-FILE-DETECTION"
#
# -= Paranoia Level 4 =- (apply only when tx.paranoia_level is sufficiently high: 4 or higher)
#



#
# -= Paranoia Levels Finished =-
#
SecMarker "END-REQUEST-914-FILE-DETECTION"
