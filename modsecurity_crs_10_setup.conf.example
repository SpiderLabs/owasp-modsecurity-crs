# ---------------------------------------------------------------
# Core ModSecurity Rule Set ver.3.0.0
# Copyright (C) 2006-2014 Trustwave All rights reserved.
#
# The OWASP ModSecurity Core Rule Set is distributed under 
# Apache Software License (ASL) version 2
# Please see the enclosed LICENCE file for full details.
# ---------------------------------------------------------------


#
# -- [[ Recommended Base Configuration ]] ------------------------------------------------- 
#
# The configuration directives/settings in this file are used to control
# the OWASP ModSecurity CRS. These settings do **NOT** configure the main
# ModSecurity settings such as:
# 
# - SecRuleEngine
# - SecRequestBodyAccess
# - SecAuditEngine
# - SecDebugLog
# - XML processing
#
# You should use the modsecurity.conf-recommended file that comes with the
# ModSecurity source code archive.
#
# Ref: https://github.com/SpiderLabs/ModSecurity/blob/master/modsecurity.conf-recommended 
#


#
# -- [[ Rule Version ]] -------------------------------------------------------------------
#
# Rule version data is added to the "Producer" line of Section H of the Audit log:
#
# - Producer: ModSecurity for Apache/2.7.0-rc1 (http://www.modsecurity.org/); OWASP_CRS/2.2.4.
#
# Ref: https://github.com/SpiderLabs/ModSecurity/wiki/Reference-Manual#wiki-SecComponentSignature 
#
SecComponentSignature "OWASP_CRS/3.0.0"


#
# -- [[ Modes of Operation: Self-Contained vs. Collaborative Detection ]] -----------------
#
# Each detection rule uses the "block" action which will inherit the SecDefaultAction
# specified below.  Your settings here will determine which mode of operation you use.
#
# -- [[ Self-Contained Mode ]] --
# Rules inherit the "deny" disruptive action.  The first rule that matches will block.
#
# -- [[ Collaborative Detection Mode ]] --
# This is a "delayed blocking" mode of operation where each matching rule will inherit
# the "pass" action and will only contribute to anomaly scores.  Transactional blocking
# can be applied 
#
# Ref: http://blog.spiderlabs.com/2010/11/advanced-topic-of-the-week-traditional-vs-anomaly-scoring-detection-modes.html
# Ref: https://github.com/SpiderLabs/ModSecurity/wiki/Reference-Manual#wiki-SecDefaultAction
#
# -- [[ Alert Logging Control ]] --
# You have three options -
#
# - To log to both the Apache error_log and ModSecurity audit_log file use: "log"
# - To log *only* to the ModSecurity audit_log file use: "nolog,auditlog"
# - To log *only* to the Apache error_log file use: "log,noauditlog"
#
# -- [[ Disruptive Action Control ]] --
# The default action is to issue a 302 redirect sending the client back to the main
# index page.
#
# -- [[ Host Meta-Data ]] --
# The tag action will include the Host header data in the alert, which helps to identify
# which Vhost triggered the rule.
#
SecDefaultAction "phase:1,log,redirect:'http://%{request_headers.host}/',tag:'Host: %{request_headers.host}'"
SecDefaultAction "phase:2,log,redirect:'http://%{request_headers.host}/',tag:'Host: %{request_headers.host}'"

#
# -- [[ Collaborative Detection Severity Levels ]] ----------------------------------------
#
# These are the default scoring points for each severity level.  You may
# adjust these to you liking.  These settings will be used in macro expansion
# in the rules to increment the anomaly scores when rules match.
#
# These are the default Severity ratings (with anomaly scores) of the individual rules -
#
#    - 2: Critical - Anomaly Score of 5.
#         Is the highest severity level possible without correlation.  It is
#         normally generated by the web attack rules (40 level files).
#    - 3: Error - Anomaly Score of 4.
#         Is generated mostly from outbound leakage rules (50 level files).
#    - 4: Warning - Anomaly Score of 3.
#         Is generated by malicious client rules (35 level files).
#    - 5: Notice - Anomaly Score of 2.
#         Is generated by the Protocol policy and anomaly files.
#
# Block Duration - is used to specify how long IP blocking rules should last.
#
# (Note: In this file, we use 'phase:1' to set CRS configuration variables.
# In general, 'phase:request' is used. However, we want to make absolutely sure
# that all configuration variables are set before the CRS rules are processed.)
#
SecAction \
 "id:'900001',\
  phase:1,\
  nolog,\
  pass,\
  t:none,\
  setvar:tx.critical_anomaly_score=5,\
  setvar:tx.error_anomaly_score=4,\
  setvar:tx.warning_anomaly_score=3,\
  setvar:tx.notice_anomaly_score=2,\
  setvar:tx.block_duration=300"


#
# -- [[ Collaborative Detection Scoring Initialization and Threshold Levels ]] ------------------------------
#
# These variables are used in macro expansion in the 49 inbound blocking and 59
# outbound blocking files.
#
# **MUST HAVE** ModSecurity v2.5.12 or higher to use macro expansion in numeric
# operators.  If you have an earlier version, edit the 49/59 files directly to
# set the appropriate anomaly score levels.
#
# You should set the score to the proper threshold you would prefer. If set to "5"
# it will work similarly to previous Mod CRS rules and will create an event in the error_log
# file if there are any rules that match.  If you would like to lessen the number of events
# generated in the error_log file, you should increase the anomaly score threshold to
# something like "20".  This would only generate an event in the error_log file if
# there are multiple lower severity rule matches or if any 1 higher severity item matches.
#
SecAction \
 "id:'900002',\
  phase:1,\
  nolog,\
  pass,\
  t:none,\
  setvar:tx.anomaly_score=0,\
  setvar:tx.sql_injection_score=0,\
  setvar:tx.xss_score=0,\
  setvar:tx.rfi_score=0,\
  setvar:tx.lfi_score=0,\
  setvar:tx.rce_score=0,\
  setvar:tx.php_injection_score=0,\
  setvar:tx.http_violation_score=0,\
  setvar:tx.session_fixation_score=0,\
  setvar:tx.inbound_anomaly_score=0,\
  setvar:tx.outbound_anomaly_score=0"

SecAction \
 "id:'900003',\
  phase:1,\
  nolog,\
  pass,\
  t:none,\
  setvar:tx.inbound_anomaly_score_threshold=5,\
  setvar:tx.outbound_anomaly_score_threshold=4"


# 
# -- [[ Collaborative Detection Blocking ]] -----------------------------------------------
#
# This is a collaborative detection mode where each rule will increment an overall
# anomaly score for the transaction. The scores are then evaluated in the following files:
#
# Inbound anomaly score - checked in the modsecurity_crs_49_inbound_blocking.conf file
# Outbound anomaly score - checked in the modsecurity_crs_59_outbound_blocking.conf file
#
# If you want to use anomaly scoring mode, then uncomment this line.
#
#SecAction \
 "id:'900004',\
  phase:1,\
  nolog,\
  pass,\
  t:none,\
  setvar:tx.anomaly_score_blocking=on"


# 
# -- [[ Paranoia Level Initialization ]] -------------------------------------------------
#
# This is a Core Rules mode which let's you include additional rules depending on the
# paranoia level you set in this rule.
#
# Default is a paranoia level of 1. Most core rules have a paranoia level of 1.
# At a paranoia level of 1, rule of the paranoia level 0 and 1 are included.
# Rules with a paranoia level of 2, 3 or 4 are skipped. Adjust the paranoia setting
# to 2 to include additional rules. Etc.
#
# The possible paranoia levels are 0,1,2,3 and 4.
#
# FIXME
# Level 0: ...
# Level 1: ...
# Level 2: ...
# Level 3: ...
# Level 4: ...

SecAction \
 "id:'900023',\
  phase:1,\
  nolog,\
  pass,\
  t:none,\
  setvar:tx.paranoia_level=1"


#
# -- [[ System Description Initalization ]] --
#
# These variables are used to enable and disable specific rules based on you
# configuration.
#
# Set each setting to reflect your perticular environment. By default all
# configurations are enabled.
# Avoid changing sql_error_match it is used for shortcutting rules for
# performance reasons.

SecAction \
  "id:'900024', \
  phase:1, \
  t:none, \
  setvar:tx.sql_error_match=0, \
  setvar:tx.msaccess=1, \
  setvar:tx.db2=1, \
  setvar:tx.emc=1, \
  setvar:tx.firebird=1, \
  setvar:tx.frontbase=1, \
  setvar:tx.hsqldb=1, \
  setvar:tx.informix=1, \
  setvar:tx.ingres=1, \
  setvar:tx.interbase=1, \
  setvar:tx.maxdb=1, \
  setvar:tx.mssql=1, \
  setvar:tx.mysql=1, \
  setvar:tx.oracle=1, \
  setvar:tx.pgsql=1, \
  setvar:tx.sqlite=1, \
  setvar:tx.sybase=1, \
  nolog, \
  pass"



#
# -- [[ GeoIP Database ]] -----------------------------------------------------------------
#
# There are some rulesets that need to inspect the GEO data of the REMOTE_ADDR data.
# 
# This product includes GeoLite data created by MaxMind, available from:
# http://www.maxmind.com.
#
# You should periodically download the MaxMind GeoIP Lite City DB for updates -
#
#       http://geolite.maxmind.com/download/geoip/database/GeoLiteCity.dat.gz
#
# You then need to define the proper path for the SecGeoLookupDb directive
#
# Ref: http://blog.spiderlabs.com/2010/10/detecting-malice-with-modsecurity-geolocation-data.html
# Ref: http://blog.spiderlabs.com/2010/11/detecting-malice-with-modsecurity-ip-forensics.html
#
SecGeoLookupDb util/geo-location/GeoLiteCity.dat


#
# -=[ High Risk Fraud Countries ]=-
# 
# Rules in the IP Reputation file can check the client against a list of HIGH Risk
# country codes. These countries have to be defined in the variable 
# tx.high_risk_country_codes.
#
# If you are sure, you are not getting any legitimate requests from a given 
# country, then you can disable all access from that country via this variable.
# The rule performing the test has the rule id 910100.
#
# By default, the list is empty. A list used by some sites is the following:
#
# setvar:'tx.high_risk_country_codes=UA ID YU LT EG RO BG TR RU PK MY CN'"
#
SecAction \
 "id:'900022',\
  phase:1,\
  nolog,\
  pass,\
  t:none,\
  setvar:'tx.high_risk_country_codes='"

#
# -- [[ Project Honeypot HTTP Blacklist API Key ]] --------------------------------------------------------
# One of the checks in the IP Reputation file is to check the client IP address against the
# Project Honeypot HTTPBL.  In order to do this, you need to register to get a free API key.
# set it here with SecHttpBlKey.
# Ref: https://github.com/SpiderLabs/ModSecurity/wiki/Reference-Manual#wiki-SecHttpBlKey
# 
# SecHttpBlKey XXXXXXXXXXXXXXXXX
#
# Project Honeypot returns multiple different malicious IP types. You may specify which you
# want to block by enabled or disabling the types below. This rule should be enabled when
# the Project Honeypot API key is enabled. By default all malicious types will be blocked.
#
#SecAction "id:'900025', \
  phase:1, \
  nolog,\
  pass,\
  t:none,\
  setvar:tx.block_search_ip=1, \
  setvar:tx.block_suspicious_ip=1, \
  setvar:tx.block_harvester_ip=1, \
  setvar:tx.block_spammer_ip=1"


#
# -- [[ Regression Testing Mode ]] --------------------------------------------------------
#
# If you are going to run the regression testing mode, you should uncomment the
# following rule. It will enable DetectionOnly mode for the SecRuleEngine and
# will enable Response Header tagging so that the client testing script can see
# which rule IDs have matched.
#
# You must specify the your source IP address where you will be running the tests
# from.
#
#SecRule REMOTE_ADDR "@ipMatch 192.168.1.100" \
 "id:'900005',\
  phase:1,\
  nolog,\
  pass,\
  t:none,\
  ctl:ruleEngine=DetectionOnly,\
  setvar:tx.regression_testing=1"


#
# -- [[ HTTP Policy Settings ]] ----------------------------------------------------------
#
# Set the following policy settings here and they will be propagated to the 23 rules
# file (modsecurity_common_23_request_limits.conf) by using macro expansion.  
# If you run into false positives, you can adjust the settings here.
#
# Only the max number of args is uncommented by default as there are a high rate
# of false positives.  Uncomment the items you wish to set.
# 
#
# -- Maximum number of arguments in request limited
SecAction \
 "id:'900006',\
  phase:1,\
  nolog,\
  pass,\
  t:none,\
  setvar:tx.max_num_args=255"

#
# -- Limit argument name length
#SecAction \
 "id:'900007',\
  phase:1,\
  nolog,\
  pass,\
  t:none,\
  setvar:tx.arg_name_length=100"

#
# -- Limit value name length
#SecAction \
 "id:'900008',\
  phase:1,\
  nolog,\
  pass,\
  t:none,\
  setvar:tx.arg_length=400"

#
# -- Limit arguments total length
#SecAction \
 "id:'900009',\
  phase:1,\
  nolog,\
  pass,\
  t:none,\
  setvar:tx.total_arg_length=64000"

#
# -- Individual file size is limited
#SecAction \
 "id:'900010',\
  phase:1,\
  nolog,\
  pass,\
  t:none,\
  setvar:tx.max_file_size=1048576"

#
# -- Combined file size is limited
#SecAction \
 "id:'900011',\
  phase:1,\
  nolog,\
  pass,\
  t:none,\
  setvar:tx.combined_file_sizes=1048576"


#
# Set the following policy settings here and they will be propagated to various
# rules files by using macro expansion:
# - REQUEST-911-METHOD-ENFORCEMENT.conf
# - REQUEST-912-DOS-PROTECTION.conf
# - REQUEST-920-PROTOCOL-ENFORCEMENT.conf
# If you run into false positives, you can adjust the settings here.
#
SecAction \
 "id:900012,\
  phase:1,\
  nolog,\
  pass,\
  t:none,\
  setvar:'tx.allowed_methods=GET HEAD POST OPTIONS', \
  setvar:'tx.static_resources=.jpg/ .jpeg/ .png/ .gif/ .js/ .css/ .ico/ .svg/ .webp/', \
  setvar:'tx.allowed_request_content_type=application/x-www-form-urlencoded|multipart/form-data|text/xml|application/xml|application/x-amf|application/json|text/plain', \
  setvar:'tx.allowed_http_versions=HTTP/1.0 HTTP/1.1 HTTP/2', \
  setvar:'tx.restricted_extensions=.asa/ .asax/ .ascx/ .axd/ .backup/ .bak/ .bat/ .cdx/ .cer/ .cfg/ .cmd/ .com/ .config/ .conf/ .cs/ .csproj/ .csr/ .dat/ .db/ .dbf/ .dll/ .dos/ .htr/ .htw/ .ida/ .idc/ .idq/ .inc/ .ini/ .key/ .licx/ .lnk/ .log/ .mdb/ .old/ .pass/ .pdb/ .pol/ .printer/ .pwd/ .resources/ .resx/ .sql/ .sys/ .vb/ .vbs/ .vbproj/ .vsdisco/ .webinfo/ .xsd/ .xsx/', \
  setvar:'tx.restricted_headers=proxy lock-token content-range translate if'"


#
# -- [[ XSS Settings ]] -----------------------------------------
#
# The purpose of these settings is to specify if your site allows
# clients to submit ANY HTML at all.  If the answer is "No" then
# use the default setting of "0".  With this setting, the XSS rules
# can be more aggressive is blocking all inbound HTML data.
#
# If your site does allow clients to submit some HTML data, then
# set this variable to "1".  This will disable some of the more
# aggressive checks looking for all HTML data. 
#
# If you allow HTML on certain pages, edit the tx.allowed_html_urls
# parameter data below.  When these URLs are accessed, the XSS checks
# will be skipped.
#
#SecAction \
 "id:'900023',\
  phase:1,\
  nolog,\
  pass,\
  t:none,\
  setvar:tx.allow_html=1,\
  setvar:'tx.allowed_html_urls=#/update.php# #/save_page.php#'"


#
# -- [[ Content Security Policy (CSP) Settings ]] -----------------------------------------
#
# The purpose of these settings is to send CSP response headers to
# Mozilla FireFox users so that you can enforce how dynamic content
# is used. CSP usage helps to prevent XSS attacks against your users.
#  
# Reference Link:
#
#   https://developer.mozilla.org/en/Security/CSP
#
# Uncomment this SecAction line if you want use CSP enforcement.
# You need to set the appropriate directives and settings for your site/domain and
# and activate the CSP file in the experimental_rules directory.
# 
# Ref: http://blog.spiderlabs.com/2011/04/modsecurity-advanced-topic-of-the-week-integrating-content-security-policy-csp.html
#
#SecAction \
 "id:'900013',\
  phase:1,\
  nolog,\
  pass,\
  t:none,\
  setvar:tx.csp_report_only=1, \
  setvar:tx.csp_report_uri=/csp_violation_report, \
  setenv:'csp_policy=allow \'self\'; img-src *.yoursite.com; media-src *.yoursite.com; style-src *.yoursite.com; frame-ancestors *.yoursite.com; script-src *.yoursite.com; report-uri %{tx.csp_report_uri}'"


#
# -- [[ Brute Force Protection ]] ---------------------------------------------------------
#
# If you are using the Brute Force Protection rule set, then uncomment the following
# lines and set the following variables:
# - Protected URLs: resources to protect (e.g. login pages) - set to your login page
# - Burst Time Slice Interval: time interval window to monitor for bursts
# - Request Threshold: request # threshold to trigger a burst
# - Block Period: temporary block timeout
#
#SecAction \
 "id:'900014',\
  phase:1,\
  nolog,\
  pass,\
  t:none,\
  setvar:'tx.brute_force_protected_urls=#/login.jsp# #/partner_login.php#',\
  setvar:'tx.brute_force_burst_time_slice=60',\
  setvar:'tx.brute_force_counter_threshold=10',\
  setvar:'tx.brute_force_block_timeout=300'"


#
# -- [[ Anti-Automation / DoS Protection ]] ----------------------------------------------
#
# Optional DoS protection against clients making requests too quickly.
#
# When a client is making more than 100 requests (excluding static files) within 60 seconds,
# this is considered a 'burst'. After two bursts, the client is blocked for 600 seconds.
# Requests to static files are unlimited; they are listed in 'tx.static_resources' setting.
#
# To enable the DoS protection rules, uncomment the following rule.
# For a detailed description, see rule file REQUEST-912-DOS-PROTECTION.conf.
#
# You may also want to check out the definition of tx.static_resources in rule 900012.
#
#SecAction \
 "id:'900015',\
  phase:1,\
  nolog,\
  pass,\
  t:none,\
  setvar:'tx.dos_burst_time_slice=60', \
  setvar:'tx.dos_counter_threshold=100', \
  setvar:'tx.dos_block_timeout=600'"


#
# -- [[ Check UTF enconding ]] -----------------------------------------------------------
#
# We only want to apply this check if UTF-8 encoding is actually used by the site, otherwise
# it will result in false positives.
#
# Uncomment this line if your site uses UTF8 encoding
#SecAction \
 "id:'900016',\
  phase:1,\
  nolog,\
  pass,\
  t:none,\
  setvar:tx.crs_validate_utf8_encoding=1"


#
# -- [[ Global and IP Collections ]] -----------------------------------------------------
#
# Create both Global and IP collections for rules to use
# There are some CRS rules that assume that these two collections
# have already been initiated.
#
SecRule REQUEST_HEADERS:User-Agent "^(.*)$" \
  "id:'900018', \
  phase:1, \
  t:none,t:sha1,t:hexEncode, \
  setvar:tx.ua_hash=%{matched_var}, \
  nolog, \
  pass"


SecRule REQUEST_HEADERS:x-forwarded-for "^\b(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\b" \
  "id:'900019', \
  phase:1, \
  t:none, \
  capture, \
  setvar:tx.real_ip=%{tx.1}, \
  nolog, \
  pass"


SecRule &TX:REAL_IP "!@eq 0" \
  "id:'900020', \
  phase:1, \
  t:none, \
  initcol:global=global, \
  initcol:ip=%{tx.real_ip}_%{tx.ua_hash}, \
  nolog, \
  pass"


SecRule &TX:REAL_IP "@eq 0" \
  "id:'900021', \
  phase:1, \
  t:none, \
  initcol:global=global, \
  initcol:ip=%{remote_addr}_%{tx.ua_hash}, \
  setvar:tx.real_ip=%{remote_addr}, \
  nolog, \
  pass"

#
# Set the SecCollectionTimeout directive to a lower setting (default
# is 1 hour).  Reducing this setting increases performance by cleaning
# out old/stale entries.
# Ref: https://github.com/SpiderLabs/ModSecurity/wiki/Reference-Manual#wiki-SecCollectionTimeout
# Using 600 (10 mins).
SecCollectionTimeout 600
