# ---------------------------------------------------------------
# Core ModSecurity Rule Set ver.3.0.0
# Copyright (C) 2006-2014 Trustwave All rights reserved.
#
# The OWASP ModSecurity Core Rule Set is distributed under 
# Apache Software License (ASL) version 2
# Please see the enclosed LICENSE file for full details.
# ---------------------------------------------------------------


#
# -- [[ Recommended Base Configuration ]] ------------------------------------------------- 
#
# The configuration directives/settings in this file are used to control
# the OWASP ModSecurity CRS. These settings do **NOT** configure the main
# ModSecurity settings such as:
# 
# - SecRuleEngine
# - SecRequestBodyAccess
# - SecAuditEngine
# - SecDebugLog
# - XML processing
#
# You should use the modsecurity.conf-recommended file that comes with the
# ModSecurity source code archive.
#
# Ref: https://github.com/SpiderLabs/ModSecurity/blob/master/modsecurity.conf-recommended 
#
# The order of file inclusion should always be as follows:
# 1. modsecurity.conf
# 2. modsecurity_crs_10_setup.conf (this file)
# 3. rules/* (the CRS rule files)
#


#
# -- [[ Modes of Operation: Self-Contained vs. Collaborative Detection ]] -----------------
#
# Each detection rule uses the "block" action which will inherit the SecDefaultAction
# specified below. Your settings here will determine which mode of operation you use.
# The default setting in OWASP CRS 3 is Collaborative Detection Mode (AKA Anomaly Mode).
#
# -- [[ Self-Contained Mode ]] --
# Rules inherit the specified disruptive action (i.e. deny, drop, etc).  The first rule
# that matches will execute this action. In most cases this will cause evaluation to 
# stop after the first rule has matched, this is similar to how many IDSs function.
#
# -- [[ Collaborative Detection Mode ]] --
# This is the default "delayed blocking" mode of operation where each matching rule 
# will inherit the "pass" action and will only contribute to anomaly scores. At the
# conclusion of the inbound rules and again at the conclusion of the outbound rules
# the anomaly score is checked. By default these anamoly score checking rules (949110
# and 959100) will override the default 'pass' disruptive action with the 'deny' 
# action. This will cause a request that exceeds the anamoly score to be blocked.
# For more information on changing this default deny, see below.
#
# -- [[ Alert Logging Control ]] --
# There are three common options for dealing with logging. By default CRS enables
# logging to the error log (or Event viewer) and logging to the audit log (if 
# configured). You can change these settings by adjusting SecDefaultAction below.
#
# - To log to both the error log and ModSecurity audit log file use: "log,auditlog"
# - To log *only* to the ModSecurity audit log file use: "nolog,auditlog"
# - To log *only* to the error log file use: "log,noauditlog"
#
# The following are provided as an example configuration for Self-Contained Mode.
#
#   -- Example 1: Basic 403 Forbidden response --
#   In this configuration the default disruptive action here is deny, after a 
#   rule triggers it will stop processing the request and return a 403.
#
#   SecDefaultAction "phase:1,log,auditlog,deny,status:403"
#   SecDefaultAction "phase:2,log,auditlog,deny,status:403"
#
#   -- Example 2: Redirect to homepage --
#   In this configuration the 'tag' action includes the Host header data in the alert, 
#   this helps to identify which virtual host triggered the rule (if any).
#
#   SecDefaultAction "phase:1,log,auditlog,redirect:'http://%{request_headers.host}/',tag:'Host: %{request_headers.host}'"
#   SecDefaultAction "phase:2,log,auditlog,redirect:'http://%{request_headers.host}/',tag:'Host: %{request_headers.host}'"
#
# -- [[ Collaborative Detection Mode Disruptive Actions ]] --
# The default in CRS 3 is Collaborative Detection Mode. In this mode SecDefaultAction's 
# disruptive action is set to 'pass', as a result, all rules that use the 'block' action
# will not interrupt a transaction, rather, these rules will only increase the anomaly 
# score. Specific rules present in REQUEST-949-BLOCKING-EVALUATION.conf and
# RESPONSE-959-BLOCKING-EVALUATION.conf actively overwrite the default actions 
# specified in SecDefaultAction with a 'deny' action. This 'deny' is be default paired 
# with a 'status:403' action. In order to change the disruptive action from 'deny' users
# should add a SecRuleUpdateActionByID directive in RESPONSE-999-EXCEPTIONS.conf. Such 
# directives may appear similar to the following:
#
#   SecRuleupdateActionById 949110 "t:none,redirect:'http://%{request_headers.host}/',chain"
#   SecRuleupdateActionById 949110 "t:none,deny,status:404,chain"
#   SecRuleupdateActionById 949110 "t:none,drop,chain"
#
#
# Ref: http://blog.spiderlabs.com/2010/11/advanced-topic-of-the-week-traditional-vs-anomaly-scoring-detection-modes.html
# Ref: https://github.com/SpiderLabs/ModSecurity/wiki/Reference-Manual#wiki-SecDefaultAction

SecDefaultAction "phase:1,log,auditlog,pass"
SecDefaultAction "phase:2,log,auditlog,pass"

#
# -- [[ Collaborative Detection Severity Levels ]] ----------------------------------------
#
# These are the default scoring points for each severity level.  You may
# adjust these to you liking.  These settings will be used in macro expansion
# in the rules to increment the anomaly scores when rules match.
#
# These are the default Severity ratings (with anomaly scores) of the individual rules -
#
#    - 2: Critical - Anomaly Score of 5.
#         Is the highest severity level possible without correlation.  It is
#         normally generated by the web attack rules (40 level files).
#    - 3: Error - Anomaly Score of 4.
#         Is generated mostly from outbound leakage rules (50 level files).
#    - 4: Warning - Anomaly Score of 3.
#         Is generated by malicious client rules (35 level files).
#    - 5: Notice - Anomaly Score of 2.
#         Is generated by the Protocol policy and anomaly files.
#
# Block Duration - is used to specify how long IP blocking rules should last.
#
# (Note: In this file, we use 'phase:1' to set CRS configuration variables.
# In general, 'phase:request' is used. However, we want to make absolutely sure
# that all configuration variables are set before the CRS rules are processed.)
#
SecAction \
 "id:'900001',\
  phase:1,\
  nolog,\
  pass,\
  t:none,\
  setvar:tx.critical_anomaly_score=5,\
  setvar:tx.error_anomaly_score=4,\
  setvar:tx.warning_anomaly_score=3,\
  setvar:tx.notice_anomaly_score=2,\
  setvar:tx.block_duration=300"


#
# -- [[ Collaborative Detection Scoring Threshold Levels ]] ------------------------------
#
# These variables are used in macro expansion in the 49 inbound blocking and 59
# outbound blocking files.
#
# **MUST HAVE** ModSecurity v2.5.12 or higher to use macro expansion in numeric
# operators.  If you have an earlier version, edit the 49/59 files directly to
# set the appropriate anomaly score levels.
#
# You should set the score to the proper threshold you would prefer. If set to "5"
# it will work similarly to previous Mod CRS rules and will create an event in the error_log
# file if there are any rules that match.  If you would like to lessen the number of events
# generated in the error_log file, you should increase the anomaly score threshold to
# something like "20".  This would only generate an event in the error_log file if
# there are multiple lower severity rule matches or if any 1 higher severity item matches.
#
SecAction \
 "id:'900003',\
  phase:1,\
  nolog,\
  pass,\
  t:none,\
  setvar:tx.inbound_anomaly_score_threshold=5,\
  setvar:tx.outbound_anomaly_score_threshold=4"


# 
# -- [[ Collaborative Detection Blocking ]] -----------------------------------------------
#
# This is a collaborative detection mode where each rule will increment an overall
# anomaly score for the transaction. The scores are then evaluated in the following files:
#
# Inbound anomaly score - checked in the REQUEST-949-BLOCKING-EVALUATION.conf file
# Outbound anomaly score - checked in the RESPONSE-959-BLOCKING-EVALUATION.conf file
#
# If you want to use anomaly scoring mode, then uncomment this line.
#
SecAction \
 "id:'900004',\
  phase:1,\
  nolog,\
  pass,\
  t:none,\
  setvar:tx.anomaly_score_blocking=on"


# 
# -- [[ Paranoia Level Initialization ]] -------------------------------------------------
#
# This is a Core Rules mode which let's you include additional rules depending on the
# paranoia level you set in this rule.
#
# Default is a paranoia level of 1. Most core rules have a paranoia level of 1.
# At a paranoia level of 1, rule of the paranoia level 0 and 1 are included.
# Rules with a paranoia level of 2, 3 or 4 are skipped. Adjust the paranoia setting
# to 2 to include additional rules. Etc.
#
# The possible paranoia levels are 0,1,2,3 and 4.
#
# FIXME
# Level 0: ...
# Level 1: ...
# Level 2: ...
# Level 3: ...
# Level 4: ...

#SecAction \
#  "id:'900023',\
#   phase:1,\
#   nolog,\
#   pass,\
#   t:none,\
#   setvar:tx.paranoia_level=1"


#
# -- [[ System Description Initalization ]] --
#
# These variables are used to enable and disable specific rules based on you
# configuration.
#
# Set each setting to reflect your perticular environment. By default all
# configurations are enabled.

SecAction \
  "id:'900024', \
  phase:1, \
  t:none, \
  setvar:tx.msaccess=1, \
  setvar:tx.db2=1, \
  setvar:tx.emc=1, \
  setvar:tx.firebird=1, \
  setvar:tx.frontbase=1, \
  setvar:tx.hsqldb=1, \
  setvar:tx.informix=1, \
  setvar:tx.ingres=1, \
  setvar:tx.interbase=1, \
  setvar:tx.maxdb=1, \
  setvar:tx.mssql=1, \
  setvar:tx.mysql=1, \
  setvar:tx.oracle=1, \
  setvar:tx.pgsql=1, \
  setvar:tx.sqlite=1, \
  setvar:tx.sybase=1, \
  nolog, \
  pass"



#
# -- [[ GeoIP Database ]] -----------------------------------------------------------------
#
# There are some rulesets that need to inspect the GEO data of the REMOTE_ADDR data.
# 
# This product includes GeoLite data created by MaxMind, available from:
# http://www.maxmind.com.
#
# You should periodically download the MaxMind GeoIP Lite City DB for updates -
#
#       http://geolite.maxmind.com/download/geoip/database/GeoLiteCity.dat.gz
#
# You then need to define the proper path for the SecGeoLookupDb directive
#
# Ref: http://blog.spiderlabs.com/2010/10/detecting-malice-with-modsecurity-geolocation-data.html
# Ref: http://blog.spiderlabs.com/2010/11/detecting-malice-with-modsecurity-ip-forensics.html
#
SecGeoLookupDb util/geo-location/GeoLiteCity.dat


#
# -=[ High Risk Fraud Countries ]=-
# 
# Rules in the IP Reputation file can check the client against a list of HIGH Risk
# country codes. These countries have to be defined in the variable 
# tx.high_risk_country_codes.
#
# If you are sure, you are not getting any legitimate requests from a given 
# country, then you can disable all access from that country via this variable.
# The rule performing the test has the rule id 910100.
#
# By default, the list is empty. A list used by some sites is the following:
#
# setvar:'tx.high_risk_country_codes=UA ID YU LT EG RO BG TR RU PK MY CN'"
#
SecAction \
 "id:'900022',\
  phase:1,\
  nolog,\
  pass,\
  t:none,\
  setvar:'tx.high_risk_country_codes='"

#
# -- [[ Project Honeypot HTTP Blacklist API Key ]] --------------------------------------------------------
# One of the checks in the IP Reputation file is to check the client IP address against the
# Project Honeypot HTTPBL.  In order to do this, you need to register to get a free API key.
# set it here with SecHttpBlKey.
# Ref: https://github.com/SpiderLabs/ModSecurity/wiki/Reference-Manual#wiki-SecHttpBlKey
# 
# SecHttpBlKey XXXXXXXXXXXXXXXXX
#
# Project Honeypot returns multiple different malicious IP types. You may specify which you
# want to block by enabled or disabling the types below. This rule should be enabled when
# the Project Honeypot API key is enabled. By default all malicious types will be blocked.
#
#SecAction "id:'900025', \
  phase:1, \
  nolog,\
  pass,\
  t:none,\
  setvar:tx.block_search_ip=1, \
  setvar:tx.block_suspicious_ip=1, \
  setvar:tx.block_harvester_ip=1, \
  setvar:tx.block_spammer_ip=1"


#
# -- [[ Regression Testing Mode ]] --------------------------------------------------------
#
# If you are going to run the regression testing mode, you should uncomment the
# following rule. It will enable DetectionOnly mode for the SecRuleEngine and
# will enable Response Header tagging so that the client testing script can see
# which rule IDs have matched.
#
# You must specify the your source IP address where you will be running the tests
# from.
#
#SecRule REMOTE_ADDR "@ipMatch 192.168.1.100" \
 "id:'900005',\
  phase:1,\
  nolog,\
  pass,\
  t:none,\
  ctl:ruleEngine=DetectionOnly,\
  setvar:tx.regression_testing=1"


#
# -- [[ HTTP Policy Settings ]] ----------------------------------------------------------
#
# Here, you can define optional limits on lengths and number of
# HTTP parameters and uploaded files. This can help to prevent
# application specific DoS attacks.
#
# Beware for blocking legitimate traffic when enabling these limits.
#
# These values are checked in REQUEST-920-PROTOCOL-ENFORCEMENT.conf.
#

# Limit number of arguments in request
SecAction \
 "id:'900006',\
  phase:1,\
  nolog,\
  pass,\
  t:none,\
  setvar:tx.max_num_args=255"

# Limit length of any argument name
#SecAction \
 "id:'900007',\
  phase:1,\
  nolog,\
  pass,\
  t:none,\
  setvar:tx.arg_name_length=100"

# Limit length of any argument value
#SecAction \
 "id:'900008',\
  phase:1,\
  nolog,\
  pass,\
  t:none,\
  setvar:tx.arg_length=400"

# Limit total length of combined arguments
#SecAction \
 "id:'900009',\
  phase:1,\
  nolog,\
  pass,\
  t:none,\
  setvar:tx.total_arg_length=64000"

# Limit file size of individual uploaded file
#SecAction \
 "id:'900010',\
  phase:1,\
  nolog,\
  pass,\
  t:none,\
  setvar:tx.max_file_size=1048576"

# Limit combined size of all uploaded files
#SecAction \
 "id:'900011',\
  phase:1,\
  nolog,\
  pass,\
  t:none,\
  setvar:tx.combined_file_sizes=1048576"

#
# Set the following policy settings here and they will be propagated to various
# rules files by using macro expansion:
# - REQUEST-911-METHOD-ENFORCEMENT.conf
# - REQUEST-912-DOS-PROTECTION.conf
# - REQUEST-920-PROTOCOL-ENFORCEMENT.conf
# If you run into false positives, you can adjust the settings here.
#
SecAction \
 "id:900012,\
  phase:1,\
  nolog,\
  pass,\
  t:none,\
  setvar:'tx.allowed_methods=GET HEAD POST OPTIONS', \
  setvar:'tx.static_resources=.jpg/ .jpeg/ .png/ .gif/ .js/ .css/ .ico/ .svg/ .webp/', \
  setvar:'tx.allowed_request_content_type=application/x-www-form-urlencoded|multipart/form-data|text/xml|application/xml|application/x-amf|application/json|text/plain', \
  setvar:'tx.allowed_http_versions=HTTP/1.0 HTTP/1.1 HTTP/2', \
  setvar:'tx.restricted_extensions=.asa/ .asax/ .ascx/ .axd/ .backup/ .bak/ .bat/ .cdx/ .cer/ .cfg/ .cmd/ .com/ .config/ .conf/ .cs/ .csproj/ .csr/ .dat/ .db/ .dbf/ .dll/ .dos/ .htr/ .htw/ .ida/ .idc/ .idq/ .inc/ .ini/ .key/ .licx/ .lnk/ .log/ .mdb/ .old/ .pass/ .pdb/ .pol/ .printer/ .pwd/ .resources/ .resx/ .sql/ .sys/ .vb/ .vbs/ .vbproj/ .vsdisco/ .webinfo/ .xsd/ .xsx/', \
  setvar:'tx.restricted_headers=proxy lock-token content-range translate if'"


#
# -- [[ XSS Settings ]] -----------------------------------------
#
# The purpose of these settings is to specify if your site allows
# clients to submit ANY HTML at all.  If the answer is "No" then
# use the default setting of "0".  With this setting, the XSS rules
# can be more aggressive is blocking all inbound HTML data.
#
# If your site does allow clients to submit some HTML data, then
# set this variable to "1".  This will disable some of the more
# aggressive checks looking for all HTML data. 
#
# If you allow HTML on certain pages, edit the tx.allowed_html_urls
# parameter data below.  When these URLs are accessed, the XSS checks
# will be skipped.
#
#SecAction \
 "id:'900023',\
  phase:1,\
  nolog,\
  pass,\
  t:none,\
  setvar:tx.allow_html=1,\
  setvar:'tx.allowed_html_urls=#/update.php# #/save_page.php#'"


#
# -- [[ Anti-Automation / DoS Protection ]] ----------------------------------------------
#
# Optional DoS protection against clients making requests too quickly.
#
# When a client is making more than 100 requests (excluding static files) within 60 seconds,
# this is considered a 'burst'. After two bursts, the client is blocked for 600 seconds.
# Requests to static files are unlimited; they are listed in 'tx.static_resources' setting.
#
# To enable the DoS protection rules, uncomment the following rule.
# For a detailed description, see rule file REQUEST-912-DOS-PROTECTION.conf.
#
# You may also want to check out the definition of tx.static_resources in rule 900012.
#
#SecAction \
 "id:'900015',\
  phase:1,\
  nolog,\
  pass,\
  t:none,\
  setvar:'tx.dos_burst_time_slice=60', \
  setvar:'tx.dos_counter_threshold=100', \
  setvar:'tx.dos_block_timeout=600'"


#
# -- [[ Check UTF enconding ]] -----------------------------------------------------------
#
# We only want to apply this check if UTF-8 encoding is actually used by the site, otherwise
# it will result in false positives.
#
# Uncomment this line if your site uses UTF8 encoding
#SecAction \
 "id:'900016',\
  phase:1,\
  nolog,\
  pass,\
  t:none,\
  setvar:tx.crs_validate_utf8_encoding=1"


#
# Set the SecCollectionTimeout directive to a lower setting (default
# is 1 hour).  Reducing this setting increases performance by cleaning
# out old/stale entries.
# Ref: https://github.com/SpiderLabs/ModSecurity/wiki/Reference-Manual#wiki-SecCollectionTimeout
# Using 600 (10 mins).
SecCollectionTimeout 600


#
# -- [[ Easing In / Sampling Percentage ]]
# -----------------------------------------------------
#
# Adding the Core Rule Set to an existing productive site can lead to false
# positives, unexpected performance issues and other undesired side effects.
#
# It can be beneficial to test the water first by enabling the CRS for a
# limited number of requests only and then, when you have solved the issues (if
# any) and you have confidence in the setup, to raise the ratio of requests
# being sent into the ruleset.
#
# Adjust the percentage of requests, that are funnelled into the Core Rules by
# setting TX.sampling_percentage below. The default is 100, meaning that every
# request gets checked by the CRS.  The selection of requests, which are going
# to be checked, is based on a pseudo random number generated by ModSecurity.
#
# If a request is allowed to pass without being checked by the CRS, there is no
# entry in the audit log (for performance reasons), but an error log entry is
# written.  If you want to disable the error log entry, then issue the
# following directive somewhere after the inclusion of the CRS
# (E.g., RESPONSE-999-EXCEPTIONS.conf).
#
# SecRuleUpdateActionById 901150 "nolog"
#
# ATTENTION: If this TX.sampling_percentage is below 100, then some of the
# requests will bypass the Core Rules completely and you lose the ability to
# protect your service with ModSecurity.
#
# SecAction "id:900025,phase:1,pass,nolog,setvar:tx.sampling_percentage=50"


#
# -- [[ End of setup ]] -----------------------------------------------------------
#
# The CRS checks the tx.setup_done variable to ensure that the setup
# has been loaded. If you are not planning to use this setup template,
# you must manually set the tx.setup_done variable before including
# the CRS rules/* files.
#
SecAction \
 "id:'900099',\
  phase:1,\
  nolog,\
  pass,\
  t:none,\
  setvar:tx.setup_done=1"
