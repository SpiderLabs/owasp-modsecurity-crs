# ---------------------------------------------------------------
# Core ModSecurity Rule Set ver.3.0.0
# Copyright (C) 2006-2014 Trustwave All rights reserved.
#
# The OWASP ModSecurity Core Rule Set is distributed under 
# Apache Software License (ASL) version 2
# Please see the enclosed LICENSE file for full details.
# ---------------------------------------------------------------


#
# -- [[ Recommended Base Configuration ]] --------------------------------------
#
# The minimum required ModSecurity version for the CRS is 2.8.0.
#
# The configuration directives/settings in this file are used to control
# the OWASP ModSecurity CRS. These settings do **NOT** configure the main
# ModSecurity settings (modsecurity.conf) such as SecRuleEngine,
# SecRequestBodyAccess, SecAuditEngine, SecDebugLog, and XML processing.
#
# The CRS assumes that modsecurity.conf is included.
# You can copy and tweak the modsecurity.conf-recommended file that comes
# with the ModSecurity source code archive:
# https://github.com/SpiderLabs/ModSecurity/blob/master/modsecurity.conf-recommended 
#
# The order of file inclusion in your webserver config should always be:
# 1. modsecurity.conf
# 2. modsecurity_crs_10_setup.conf (this file)
# 3. rules/*.conf (the CRS rule files)
#
# Please refer to the INSTALL file for detailed installation instructions.
#


#
# -- [[ Mode of Operation: Anomaly Scoring vs. Self-Contained ]] ---------------
#
# The CRS can run in two modes:
#
# -- [[ Anomaly Scoring Mode (default) ]] --
# In CRS3, anomaly mode is the default and recommended mode, since it gives the
# most accurate log information and offers the most flexibility in setting your
# blocking policies. It is also called "collaborative detection mode".
# In this mode, each matching rule increases an 'anomaly score', and all
# rule actions default to 'pass', so rule processing continues after a match.
# At the conclusion of the inbound rules, and again at the conclusion of the
# outbound rules, the anomaly score is checked, and the blocking evaluation
# rules apply a disruptive action, by default returning an error 403.
# To change the disruptive action, see RESPONSE-999-EXCEPTIONS.conf.example
# and review section 'Changing the Disruptive Action for Anomaly Mode'.
#
# -- [[ Self-Contained Mode ]] --
# In this mode, rules apply an action instantly. This was the CRS2 default.
# It can lower resource usage, at the cost of less flexibility in blocking policy
# and less informative audit logs (only the first detected threat is logged).
# Rules inherit the specified disruptive action (i.e. deny, drop, etc).
# The first rule that matches will execute this action. In most cases this will
# cause evaluation to stop after the first rule has matched, similar to how many
# IDSs function.
#
# -- [[ Alert Logging Control ]] --
# In the mode configuration, you can also adjust the desired logging options.
# There are three common options for dealing with logging. By default CRS enables
# logging to the webserver error log (or Event viewer) plus detailed logging to
# the ModSecurity audit log.
#
# - To log to both error log and ModSecurity audit log file, use: "log,auditlog"
# - To log *only* to the ModSecurity audit log file, use: "nolog,auditlog"
# - To log *only* to the error log file, use: "log,noauditlog"
#
# Examples for the various modes follow.
# You must leave one of the following options enabled.
# Each detection rule uses the "block" action, which will inherit the
# SecDefaultAction specified below.
# Note that you must specify the same line for phase:1 and phase:2.
#

# Default: Anomaly Scoring mode, log to error log, log to ModSecurity audit log
# By default, blocks with error 403.
# To change the disruptive action, see RESPONSE-999-EXCEPTIONS.conf.example
# and review section 'Changing the Disruptive Action for Anomaly Mode'.
#
SecDefaultAction "phase:1,log,auditlog,pass"
SecDefaultAction "phase:2,log,auditlog,pass"

# Example: Anomaly Scoring mode, log only to ModSecurity audit log
# By default, blocks with error 403.
# To change the disruptive action, see RESPONSE-999-EXCEPTIONS.conf.example
# and review section 'Changing the Disruptive Action for Anomaly Mode'.
#
# SecDefaultAction "phase:1,nolog,auditlog,pass"
# SecDefaultAction "phase:2,nolog,auditlog,pass"

# Example: Self-contained mode, return error 403 on blocking
# In this configuration the default disruptive action here is 'deny'. After a
# rule triggers, it will stop processing the request and return an error 403.
# You can also use a different error status, such as 404, 406, et cetera.
#
# SecDefaultAction "phase:1,log,auditlog,deny,status:403"
# SecDefaultAction "phase:2,log,auditlog,deny,status:403"

# Example: Self-contained mode, redirect back to homepage on blocking
# In this configuration the 'tag' action includes the Host header data in the
# alert. This helps to identify which virtual host triggered the rule (if any).
# Note that this might cause redirect loops in some situations; for example
# if a Cookie or User-Agent header is blocked, it will also be blocked when
# it subsequently tries to access the homepage.
# SecDefaultAction "phase:1,log,auditlog,redirect:'http://%{request_headers.host}/',tag:'Host: %{request_headers.host}'"
# SecDefaultAction "phase:2,log,auditlog,redirect:'http://%{request_headers.host}/',tag:'Host: %{request_headers.host}'"


#
# -- [[ Anomaly Mode Severity Levels ]] ----------------------------------------
#
# These are the default scoring points for each severity level. You may
# adjust these to your liking. These settings will be used in macro expansion
# in the rules to increment the anomaly scores when rules match.
#
# These are the default Severity ratings (with anomaly scores) of the individual
# rules:
#
#    - 2: Critical - Anomaly Score of 5.
#         Is the highest severity level possible without correlation.  It is
#         normally generated by the web attack rules (40 level files).
#    - 3: Error - Anomaly Score of 4.
#         Is generated mostly from outbound leakage rules (50 level files).
#    - 4: Warning - Anomaly Score of 3.
#         Is generated by malicious client rules (35 level files).
#    - 5: Notice - Anomaly Score of 2.
#         Is generated by the Protocol policy and anomaly files.
#
# Block Duration - is used to specify how long IP blocking rules should last.
#
# (Note: In this file, we use 'phase:1' to set CRS configuration variables.
# In general, 'phase:request' is used. However, we want to make absolutely sure
# that all configuration variables are set before the CRS rules are processed.)
#
#SecAction \
# "id:'900001',\
#  phase:1,\
#  nolog,\
#  pass,\
#  t:none,\
#  setvar:tx.critical_anomaly_score=5,\
#  setvar:tx.error_anomaly_score=4,\
#  setvar:tx.warning_anomaly_score=3,\
#  setvar:tx.notice_anomaly_score=2,\
#  setvar:tx.block_duration=300"


#
# -- [[ Anomaly Mode Blocking Threshold Levels ]] ------------------------------
#
# Here, you can specify at which cumulative anomaly score an inbound request,
# or outbound response, should be blocked.
#
# Most detected inbound threats will give a critical score of 5.
# Most outbound threats, like data leakages, will give a score of 4.
# Smaller violations, like violations of protocol/standards, carry lower scores.
#
# If you keep the blocking thresholds at the defaults, the CRS will work
# similarly to previous CRS versions: a single critical rule match will cause
# the request to be blocked and logged.
#
# If you want to make the CRS less sensitive, you can increase the blocking
# thresholds, for instance to 7 (which would require multiple rules to match)
# or 10 (which would require at least two critical alerts - or a combination
# of lesser alerts), or even higher. However, this might cause some attacks
# to bypass the CRS.
#
#SecAction \
# "id:'900003',\
#  phase:1,\
#  nolog,\
#  pass,\
#  t:none,\
#  setvar:tx.inbound_anomaly_score_threshold=5,\
#  setvar:tx.outbound_anomaly_score_threshold=4"


# 
# -- [[ Paranoia Level Initialization ]] ---------------------------------------
#
# The Paranoia Level (PL) setting allows you to choose the desired level
# of rule checks.
#
# With each paranoia level increase, the CRS enables additional rules.
# However, higher paranoia levels also increase the possibility of
# blocking some legitimate traffic. If you use higher paranoia levels,
# it is likely that you will need to add some exclusion rules for
# certain applications receiving 'strange' input.
#
# - A paranoia level of 1 is default. In this level, most core rules
#   are enabled. This level is advised for beginners and installations
#   covering many different sites and applications.
# - Paranoia level 2 includes many extra rules, for instance enabling
#   many regexp-based SQL and XSS injection protections, and adding
#   extra keywords checked for code injections. This level is advised
#   for moderate to experienced users desiring more complete coverage.
# - Paranoia level 3 enables more rules and keyword lists, and tweaks
#   limits on special characters used.
# - Paranoia level 4 further restricts special characters.
#   The highest levels are advised for experienced users protecting
#   sensitive installations.
#
# Rules in paranoia level 2 or higher will log their PL to the audit log;
# example: [tag "paranoia-level/2"]. This allows you to deduct from the
# audit log how the WAF behavior is affected by paranoia level.
#
# If commented out, paranoia_level=1 is the default.
#
#SecAction \
#  "id:'900023',\
#   phase:1,\
#   nolog,\
#   pass,\
#   t:none,\
#   setvar:tx.paranoia_level=1"


#
# -- [[ System Description Initalization ]] --
#
# These variables are used to enable and disable specific rules based on you
# configuration.
#
# Set each setting to reflect your perticular environment. By default all
# configurations are enabled.

SecAction \
  "id:'900024', \
  phase:1, \
  t:none, \
  setvar:tx.msaccess=1, \
  setvar:tx.db2=1, \
  setvar:tx.emc=1, \
  setvar:tx.firebird=1, \
  setvar:tx.frontbase=1, \
  setvar:tx.hsqldb=1, \
  setvar:tx.informix=1, \
  setvar:tx.ingres=1, \
  setvar:tx.interbase=1, \
  setvar:tx.maxdb=1, \
  setvar:tx.mssql=1, \
  setvar:tx.mysql=1, \
  setvar:tx.oracle=1, \
  setvar:tx.pgsql=1, \
  setvar:tx.sqlite=1, \
  setvar:tx.sybase=1, \
  nolog, \
  pass"



#
# -- [[ GeoIP Database ]] ------------------------------------------------------
#
# There are some rulesets that need to inspect the GEO data of the REMOTE_ADDR data.
# 
# This product includes GeoLite data created by MaxMind, available from:
# http://www.maxmind.com.
#
# You should periodically download the MaxMind GeoIP Lite City DB for updates -
#
#       http://geolite.maxmind.com/download/geoip/database/GeoLiteCity.dat.gz
#
# You then need to define the proper path for the SecGeoLookupDb directive
#
# Ref: http://blog.spiderlabs.com/2010/10/detecting-malice-with-modsecurity-geolocation-data.html
# Ref: http://blog.spiderlabs.com/2010/11/detecting-malice-with-modsecurity-ip-forensics.html
#
#SecGeoLookupDb util/geo-location/GeoLiteCity.dat


#
# -=[ High Risk Fraud Countries ]=-
# 
# Rules in the IP Reputation file can check the client against a list of HIGH Risk
# country codes. These countries have to be defined in the variable 
# tx.high_risk_country_codes.
#
# If you are sure, you are not getting any legitimate requests from a given 
# country, then you can disable all access from that country via this variable.
# The rule performing the test has the rule id 910100.
#
# By default, the list is empty. A list used by some sites was the following:
# setvar:'tx.high_risk_country_codes=UA ID YU LT EG RO BG TR RU PK MY CN'"
#
# This rule requires SecGeoLookupDb (see above).
#
#SecAction \
# "id:'900022',\
#  phase:1,\
#  nolog,\
#  pass,\
#  t:none,\
#  setvar:'tx.high_risk_country_codes='"


#
# -- [[ Project Honeypot HTTP Blacklist ]] -------------------------------------
#
# One of the checks in the IP Reputation file is to check the client IP address against the
# Project Honeypot HTTPBL.  In order to do this, you need to register to get a free API key.
# Set it here with SecHttpBlKey.
# Ref: https://github.com/SpiderLabs/ModSecurity/wiki/Reference-Manual#wiki-SecHttpBlKey
# 
# Project Honeypot returns multiple different malicious IP types.
# You may specify which you want to block by enabled or disabling them below.
#
#SecHttpBlKey XXXXXXXXXXXXXXXXX
#SecAction "id:'900025', \
#  phase:1, \
#  nolog,\
#  pass,\
#  t:none,\
#  setvar:tx.block_search_ip=1, \
#  setvar:tx.block_suspicious_ip=1, \
#  setvar:tx.block_harvester_ip=1, \
#  setvar:tx.block_spammer_ip=1"


#
# -- [[ Regression Testing Mode ]] ---------------------------------------------
#
# If you are going to run the regression testing mode, you should uncomment the
# following rule. It will enable DetectionOnly mode for the SecRuleEngine and
# will enable Response Header tagging so that the client testing script can see
# which rule IDs have matched.
#
# The server will insert "X-WAF-Events" and "X-WAF-Score" in the response.
# Example output:
#   X-WAF-Events: TX:930110-OWASP_CRS/WEB_ATTACK/DIR_TRAVERSAL-REQUEST_URI,
#                TX:930120-OWASP_CRS/WEB_ATTACK/FILE_INJECTION-ARGS:foo
#   X-WAF-Score: Total=15; sqli=0; xss=0; rfi=0; lfi=15; rce=0; php=0; http=0; ses=0
#
# To enable this functionality, include the RESPONSE-981-REGRESSION.conf file.
# You must specify the source IP address/range where you will be running the
# tests from. The source IP will not be blocked in case of rule matches.
# Only enable this on private networks.
#
#Include /path/to/crs/util/regression-tests/RESPONSE-981-REGRESSION.conf
#SecRule REMOTE_ADDR "@ipMatch 192.168.1.100" \
# "id:'900005',\
#  phase:1,\
#  nolog,\
#  pass,\
#  t:none,\
#  ctl:ruleEngine=DetectionOnly,\
#  setvar:tx.regression_testing=1"


#
# -- [[ HTTP Policy Settings ]] ------------------------------------------------
#
# Here, you can define optional limits on lengths and number of
# HTTP parameters and uploaded files. This can help to prevent
# application specific DoS attacks.
#
# Beware for blocking legitimate traffic when enabling these limits.
#
# These values are checked in REQUEST-920-PROTOCOL-ENFORCEMENT.conf.
#

# Limit number of arguments in request
SecAction \
 "id:'900006',\
  phase:1,\
  nolog,\
  pass,\
  t:none,\
  setvar:tx.max_num_args=255"

# Limit length of any argument name
#SecAction \
# "id:'900007',\
#  phase:1,\
#  nolog,\
#  pass,\
#  t:none,\
#  setvar:tx.arg_name_length=100"

# Limit length of any argument value
#SecAction \
# "id:'900008',\
#  phase:1,\
#  nolog,\
#  pass,\
#  t:none,\
#  setvar:tx.arg_length=400"

# Limit total length of combined arguments
#SecAction \
# "id:'900009',\
#  phase:1,\
#  nolog,\
#  pass,\
#  t:none,\
#  setvar:tx.total_arg_length=64000"

# Limit file size of individual uploaded file
#SecAction \
# "id:'900010',\
#  phase:1,\
#  nolog,\
#  pass,\
#  t:none,\
#  setvar:tx.max_file_size=1048576"

# Limit combined size of all uploaded files
#SecAction \
# "id:'900011',\
#  phase:1,\
#  nolog,\
#  pass,\
#  t:none,\
#  setvar:tx.combined_file_sizes=1048576"

#
# Set the following policy settings here and they will be propagated to various
# rules files by using macro expansion:
# - REQUEST-911-METHOD-ENFORCEMENT.conf
# - REQUEST-912-DOS-PROTECTION.conf
# - REQUEST-920-PROTOCOL-ENFORCEMENT.conf
# If you run into false positives, you can adjust the settings here.
#
SecAction \
 "id:900012,\
  phase:1,\
  nolog,\
  pass,\
  t:none,\
  setvar:'tx.allowed_methods=GET HEAD POST OPTIONS', \
  setvar:'tx.static_resources=.jpg/ .jpeg/ .png/ .gif/ .js/ .css/ .ico/ .svg/ .webp/', \
  setvar:'tx.allowed_request_content_type=application/x-www-form-urlencoded|multipart/form-data|text/xml|application/xml|application/x-amf|application/json|text/plain', \
  setvar:'tx.allowed_http_versions=HTTP/1.0 HTTP/1.1 HTTP/2', \
  setvar:'tx.restricted_extensions=.asa/ .asax/ .ascx/ .axd/ .backup/ .bak/ .bat/ .cdx/ .cer/ .cfg/ .cmd/ .com/ .config/ .conf/ .cs/ .csproj/ .csr/ .dat/ .db/ .dbf/ .dll/ .dos/ .htr/ .htw/ .ida/ .idc/ .idq/ .inc/ .ini/ .key/ .licx/ .lnk/ .log/ .mdb/ .old/ .pass/ .pdb/ .pol/ .printer/ .pwd/ .resources/ .resx/ .sql/ .sys/ .vb/ .vbs/ .vbproj/ .vsdisco/ .webinfo/ .xsd/ .xsx/', \
  setvar:'tx.restricted_headers=proxy lock-token content-range translate if'"


#
# -- [[ XSS Settings ]] --------------------------------------------------------
#
# The purpose of these settings is to specify if your site allows
# clients to submit ANY HTML at all.  If the answer is "No" then
# use the default setting of "0".  With this setting, the XSS rules
# can be more aggressive is blocking all inbound HTML data.
#
# If your site does allow clients to submit some HTML data, then
# set this variable to "1".  This will disable some of the more
# aggressive checks looking for all HTML data. 
#
# If you allow HTML on certain pages, edit the tx.allowed_html_urls
# parameter data below.  When these URLs are accessed, the XSS checks
# will be skipped.
#
#SecAction \
# "id:'900023',\
#  phase:1,\
#  nolog,\
#  pass,\
#  t:none,\
#  setvar:tx.allow_html=1,\
#  setvar:'tx.allowed_html_urls=#/update.php# #/save_page.php#'"


#
# -- [[ Anti-Automation / DoS Protection ]] ------------------------------------
#
# Optional DoS protection against clients making requests too quickly.
#
# When a client is making more than 100 requests (excluding static files) within 60 seconds,
# this is considered a 'burst'. After two bursts, the client is blocked for 600 seconds.
# Requests to static files are unlimited; they are listed in 'tx.static_resources' setting.
#
# To enable the DoS protection rules, uncomment the following rule.
# For a detailed description, see rule file REQUEST-912-DOS-PROTECTION.conf.
#
# You may also want to check out the definition of tx.static_resources in rule 900012.
#
#SecAction \
# "id:'900015',\
#  phase:1,\
#  nolog,\
#  pass,\
#  t:none,\
#  setvar:'tx.dos_burst_time_slice=60', \
#  setvar:'tx.dos_counter_threshold=100', \
#  setvar:'tx.dos_block_timeout=600'"


#
# -- [[ Check UTF encoding ]] --------------------------------------------------
#
# Enable this setting to check for invalid UTF-8 encoding.
# We only want to apply this check if UTF-8 encoding is actually used by the
# site, otherwise it will result in false positives.
#
#SecAction \
# "id:'900016',\
#  phase:1,\
#  nolog,\
#  pass,\
#  t:none,\
#  setvar:tx.crs_validate_utf8_encoding=1"


#
# -- [[ Collection timeout ]] --------------------------------------------------
#
# Set the SecCollectionTimeout directive to a lower setting (default
# is 1 hour).  Reducing this setting increases performance by cleaning
# out old/stale entries.
# Ref: https://github.com/SpiderLabs/ModSecurity/wiki/Reference-Manual#wiki-SecCollectionTimeout

# Using 600 (10 mins).
SecCollectionTimeout 600


#
# -- [[ Easing In / Sampling Percentage ]] -------------------------------------
#
# Adding the Core Rule Set to an existing productive site can lead to false
# positives, unexpected performance issues and other undesired side effects.
#
# It can be beneficial to test the water first by enabling the CRS for a
# limited number of requests only and then, when you have solved the issues (if
# any) and you have confidence in the setup, to raise the ratio of requests
# being sent into the ruleset.
#
# Adjust the percentage of requests, that are funnelled into the Core Rules by
# setting TX.sampling_percentage below. The default is 100, meaning that every
# request gets checked by the CRS.  The selection of requests, which are going
# to be checked, is based on a pseudo random number generated by ModSecurity.
#
# If a request is allowed to pass without being checked by the CRS, there is no
# entry in the audit log (for performance reasons), but an error log entry is
# written.  If you want to disable the error log entry, then issue the
# following directive somewhere after the inclusion of the CRS
# (E.g., RESPONSE-999-EXCEPTIONS.conf).
#
# SecRuleUpdateActionById 901150 "nolog"
#
# ATTENTION: If this TX.sampling_percentage is below 100, then some of the
# requests will bypass the Core Rules completely and you lose the ability to
# protect your service with ModSecurity.
#
# SecAction "id:900025,phase:1,pass,nolog,setvar:tx.sampling_percentage=50"


#
# -- [[ End of setup ]] --------------------------------------------------------
#
# The CRS checks the tx.setup_done variable to ensure that the setup
# has been loaded. If you are not planning to use this setup template,
# you must manually set the tx.setup_done variable before including
# the CRS rules/* files.
#
SecAction \
 "id:'900099',\
  phase:1,\
  nolog,\
  pass,\
  t:none,\
  setvar:tx.setup_done=1"
