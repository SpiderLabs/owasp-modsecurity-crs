                           _____ _____   _____   ____  
                          / ____|  __ \ / ____| |___ \ 
                         | |    | |__) | (___     __) |
                         | |    |  _  / \___ \   |__ < 
                         | |____| | \ \ ____) |  ___) |
                          \_____|_|  \_\_____/  |____/

                            OWASP Core Rule Set 3.x

Instaling ModSecurity
=====================

    This document does NOT detail how to install ModSecurity. Rather,
    only information pertaining to the installation of the OWASP Core
    Rule Set (CRS) is provided. However, ModSecurity is a prerequisite
    for the CRS installation. Information on installing ModSecurity 
    can be found within the ModSecurity project at 
    https://github.com/SpiderLabs/ModSecurity or at ModSecurity.org.
 
Installing From a Package Manager
=================================
 
    The OWASP Core Rule Set (CRS) is available from many sources. On
    multiple platforms this includes package managers. These packages are 
    maintained by independent packagers who package CRS in their own time.
    Historically,many of these packages have been out of date. As such, 
    it is recommended that you install, where possible, from our GitHub 
    repository. The following packages are known to exist:
    
    *There are currently no known packages of CRS 3.x    

Installing From Git
===================
 
    Github is the preferred way to download and install CRS. Doing so
    insures that you have the most recent version of the rules. We
    encourage you to create scripts that will automatically download
    updates at regular intervals so that you may be protected against
    the latest threats that CRS adds protection for.
    
Prerequisites
-------------

    CRS is designed to be used with ModSecurity (although many other 
    projects also use the provided rules). CRS version 3 is designed for
    ModSecurity 2.8 or above. CRS version 3.x makes use of libinjection
    and libXML2. Failure to provide these prerequisites may result in 
    serious false negatives and CRS version 3 should NOT be run without
    these. Additionally, if you are downloading from the GitHub repo 
    you will need to install 'git' on your system.
    
Installing on Apache
--------------------
    1. Install ModSecurity for Apache
    2. Ensure that ModSecurity is loading correctly by checking error.log
    at start up for lines indicating ModSecurity is installed. An example 
    might appear as follows:
    ```ModSecurity for Apache/2.9.1 (http://www.modsecurity.org/) configured.```
    3. Clone the repository into the current folder using:
    ```git clone https://github.com/SpiderLabs/owasp-modsecurity-crs```
    4. Move the crs-setup.conf.example file to 
    crs-setup.conf. Please take this time to go through this
    file and customize the settings for your local environment. Failure to
    do so may result in false negatives and false positives. See the 
    section entitled OWASP CRS Configuration for more detail.
    5. Rename rules/REQUEST-00-LOCAL-WHITELIST.conf.example and 
    rules/RESPONSE-99-EXCEPTIONS.conf.example to remove the '.example' 
    extension. This will allow you to add exceptions without updates
    overwriting them in the future.    
    6. The most common method of deploying ModSecurity we have seen is 
    to create a new folder underneath the Apache directory (typically
    /usr/apache/, /etc/httpd/, or /etc/apache2). Often this folder is 
    called 'modsecurity.d'
    7. Either move the cloned 'owasp-modsecurity-crs folder to the new
    folder or symlink the following files:
         a) The main crs-setup.conf file
         b) Any rules from the rules directory you want to deploy
         c) Any remaining rules from the util directory
         *Note: you'll want to maintain the directory structure if symlinking*
    8. Add the following line to your httpd.conf (assuming you've placed 
    the rule files into modsecurity.d folder):
    
        ```<IfModule security2_module>
                Include modsecurity.d/crs-setup.conf
                Include modsecurity.d/rules/*.conf
        </IfModule>```
    9. Restart web server and ensure it starts without errors
    10. Make sure your web sites are still running fine.

Installing on Nginx
-------------------
    1. Compile ModSecurity into Nginx
    2. Ensure that ModSecurity is loading correctly by checking error.log
    at start up for lines indicating ModSecurity is installed. An example 
    might appear as follows:
    ```ModSecurity for nginx (STABLE)/2.9.1 (http://www.modsecurity.org/) configured.```
    3. Clone the repository into the current folder using:
    ```git clone https://github.com/SpiderLabs/owasp-modsecurity-crs```
    4. Move the crs-setup.conf.example file to 
    crs-setup.conf. Please take this time to go through this
    file and customize the settings for your local environment. Failure to
    do so may result in false negatives and false positives. See the 
    section entitled OWASP CRS Configuration for more detail.
    5. Rename rules/REQUEST-00-LOCAL-WHITELIST.conf.example and 
    rules/RESPONSE-99-EXCEPTIONS.conf.example to remove the '.example' 
    extension. This will allow you to add exceptions without updates
    overwriting them in the future.
    5. Move or symlink the owasp-modsecurity-crs folder obtained via the 
    git repo into your nginx configuration folder (typically 
    /usr/local/nginx/conf/)
    6. Nginx requires the configuration of a single ModSecurity 
    configuration file within the nginx.conf file using the 
    'ModSecurityConfig' directive (when using ModSecurity 2.x).
    Best practice is to set 'ModSecurityConfig' to a file from 
    which you will include your other ModSecurity configuration
    files. In this example we will use:
    ```ModSecurityConfig modsec_includes.conf;```
    7. Within modsec_includes.conf create your includes to the
    CRS folder similar to as follows (The modsecurity.conf file from the
    ModSecurity installation is included in this example):
    ```
    include modsecurity.conf
    include owasp-modsecurity-crs/crs-setup.conf
    include owasp-modsecurity-crs/rules/REQUEST-00-LOCAL-WHITELIST.conf
    include owasp-modsecurity-crs/rules/REQUEST-01-COMMON-EXCEPTIONS.conf
    include owasp-modsecurity-crs/rules/REQUEST-10-IP-REPUTATION.conf
    include owasp-modsecurity-crs/rules/REQUEST-11-METHOD-ENFORCEMENT.conf
    include owasp-modsecurity-crs/rules/REQUEST-12-DOS-PROTECTION.conf
    include owasp-modsecurity-crs/rules/REQUEST-13-SCANNER-DETECTION.conf
    include owasp-modsecurity-crs/rules/REQUEST-20-PROTOCOL-ENFORCEMENT.conf
    include owasp-modsecurity-crs/rules/REQUEST-21-PROTOCOL-ATTACK.conf
    include owasp-modsecurity-crs/rules/REQUEST-30-APPLICATION-ATTACK-LFI.conf
    include owasp-modsecurity-crs/rules/REQUEST-31-APPLICATION-ATTACK-RFI.conf
    include owasp-modsecurity-crs/rules/REQUEST-32-APPLICATION-ATTACK-RCE.conf
    include owasp-modsecurity-crs/rules/REQUEST-33-APPLICATION-ATTACK-PHP.conf
    include owasp-modsecurity-crs/rules/REQUEST-41-APPLICATION-ATTACK-XSS.conf
    include owasp-modsecurity-crs/rules/REQUEST-42-APPLICATION-ATTACK-SQLI.conf
    include owasp-modsecurity-crs/rules/REQUEST-43-APPLICATION-ATTACK-SESSION-FIXATION.conf
    include owasp-modsecurity-crs/rules/REQUEST-49-BLOCKING-EVALUATION.conf
    include owasp-modsecurity-crs/rules/RESPONSE-50-DATA-LEAKAGES-IIS.conf
    include owasp-modsecurity-crs/rules/RESPONSE-50-DATA-LEAKAGES-JAVA.conf
    include owasp-modsecurity-crs/rules/RESPONSE-50-DATA-LEAKAGES-PHP.conf
    include owasp-modsecurity-crs/rules/RESPONSE-50-DATA-LEAKAGES.conf
    include owasp-modsecurity-crs/rules/RESPONSE-51-DATA-LEAKAGES-SQL.conf
    include owasp-modsecurity-crs/rules/RESPONSE-59-BLOCKING-EVALUATION.conf
    include owasp-modsecurity-crs/rules/RESPONSE-80-CORRELATION.conf
    include owasp-modsecurity-crs/rules/RESPONSE-99-EXCEPTIONS.conf
    ```
    8. Restart web server and ensure it starts without errors
    9. Make sure your web sites are still running fine.
    
Installing on IIS
-----------------
    The IIS installer comes with an optional version of CRS built in.
    To upgrade or install this after the fact follow the following 
    steps.
    1. Navigate to "[drive_letters]:\Program Files\ModSecurity IIS\"
    2. Clone the repository into the current folder using:
    ```git clone https://github.com/SpiderLabs/owasp-modsecurity-crs```
    3. Move the crs-setup.conf.example file to 
    crs-setup.conf. Please take this time to go through this
    file and customize the settings for your local environment. Failure to
    do so may result in false negatives and false positives. See the 
    section entitled OWASP CRS Configuration for more detail.
    4. Rename rules/REQUEST-00-LOCAL-WHITELIST.conf.example and 
    rules/RESPONSE-99-EXCEPTIONS.conf.example to remove the '.example' 
    extension. This will allow you to add exceptions without updates
    overwriting them in the future.   
    5. Navigate back to the 'ModSecurity IIS' folder and modify the 
    'modsecurity_iis' to include the following:
    ```
    include owasp-modsecurity-crs/crs-setup.conf
    include owasp-modsecurity-crs/rules/REQUEST-00-LOCAL-WHITELIST.conf
    include owasp-modsecurity-crs/rules/REQUEST-01-COMMON-EXCEPTIONS.conf
    include owasp-modsecurity-crs/rules/REQUEST-10-IP-REPUTATION.conf
    include owasp-modsecurity-crs/rules/REQUEST-11-METHOD-ENFORCEMENT.conf
    include owasp-modsecurity-crs/rules/REQUEST-12-DOS-PROTECTION.conf
    include owasp-modsecurity-crs/rules/REQUEST-13-SCANNER-DETECTION.conf
    include owasp-modsecurity-crs/rules/REQUEST-20-PROTOCOL-ENFORCEMENT.conf
    include owasp-modsecurity-crs/rules/REQUEST-21-PROTOCOL-ATTACK.conf
    include owasp-modsecurity-crs/rules/REQUEST-30-APPLICATION-ATTACK-LFI.conf
    include owasp-modsecurity-crs/rules/REQUEST-31-APPLICATION-ATTACK-RFI.conf
    include owasp-modsecurity-crs/rules/REQUEST-32-APPLICATION-ATTACK-RCE.conf
    include owasp-modsecurity-crs/rules/REQUEST-33-APPLICATION-ATTACK-PHP.conf
    include owasp-modsecurity-crs/rules/REQUEST-41-APPLICATION-ATTACK-XSS.conf
    include owasp-modsecurity-crs/rules/REQUEST-42-APPLICATION-ATTACK-SQLI.conf
    include owasp-modsecurity-crs/rules/REQUEST-43-APPLICATION-ATTACK-SESSION-FIXATION.conf
    include owasp-modsecurity-crs/rules/REQUEST-49-BLOCKING-EVALUATION.conf
    include owasp-modsecurity-crs/rules/RESPONSE-50-DATA-LEAKAGES-IIS.conf
    include owasp-modsecurity-crs/rules/RESPONSE-50-DATA-LEAKAGES-JAVA.conf
    include owasp-modsecurity-crs/rules/RESPONSE-50-DATA-LEAKAGES-PHP.conf
    include owasp-modsecurity-crs/rules/RESPONSE-50-DATA-LEAKAGES.conf
    include owasp-modsecurity-crs/rules/RESPONSE-51-DATA-LEAKAGES-SQL.conf
    include owasp-modsecurity-crs/rules/RESPONSE-59-BLOCKING-EVALUATION.conf
    include owasp-modsecurity-crs/rules/RESPONSE-80-CORRELATION.conf
    include owasp-modsecurity-crs/rules/RESPONSE-99-EXCEPTIONS.conf
    ```
    6. Restart web server and ensure it starts without errors
    7. Make sure your web sites are still running fine.    
    
Testing the Installation
========================
    To test your installation you should be able to use any number 
    of attacks. A typical request which should trigger CRS would be
    ```http://localhost/?param="><script>alert(1);</script>```
    Upon sending this request you should see events reported in the
    error log (nginx apache) or the event viewer (IIS). 
    
    If you have configured blocking during your ModSecurity 
    configuration this request may be blocked in some manner. 
    Likewise if you have configured debug logging and/or audit 
    logging this event should log to these locations as well.
    
OWASP CRS Configuration
=======================

    The crs-setup.conf file includes management rules 
    and directives that can control important CRS functions. By 
    default we do not include settings within this file that configure
    'core ModSecurity' instead those configuration settings, including
    SecDefaultEngine (if the rules are enforcing) are set during the 
    installation of ModSecurity proper. An example for such such a 
    configuration file is available via the ModSecurity project 
    (https://github.com/SpiderLabs/ModSecurity/blob/master/modsecurity.conf-recommended).
    Be aware the crs-setup.conf file does specify 
    configuration directives such as SecDefaultAction. The default 
    setting is to redirect to the sites homepage on a rule triggering. 
    To enable anomaly scoring mode SecDefaultAction should be set to 
    "pass". In this case, the rules in 49 inbound blocking and 59 
    outbound blocking files will be the only rules that will disrupt
    requests/response, specific disruptions, such as redirects and 
    status responses, can be configured at this locations.

    If using anomaly/correlation mode you should update the appropriate
    anomaly scores and thresholds the thresholds will be propagated to
    the inbound/outbound blocking files well the scores will be used to
    prioritize the criticalitly of rule types triggering.

    Update the TX policy settings for allowed Request Methods, File 
    Extensions, etc to better reflect your environment that is being 
    protected.

    Make sure your GeoIP and Project Honeypot settings are specified if 
    you are using them. The use Project Honeypot requires a free API key.
    These require an account but can be obtained at 
    https://www.projecthoneypot.org/httpbl_configure.php.
	 
    Be sure to check out the other settings present within the setup.conf
    file, there are many other options that have to do with aspects of web
    application security that are beyond this document.
 
